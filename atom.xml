<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术博客</title>
  <subtitle>慧萌信安互联网</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wisdombud.github.io/"/>
  <updated>2016-03-13T08:42:35.443Z</updated>
  <id>http://wisdombud.github.io/</id>
  
  <author>
    <name>Joseph</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EOVA简介</title>
    <link href="http://wisdombud.github.io/2016/03/13/EOVA%E7%AE%80%E4%BB%8B/"/>
    <id>http://wisdombud.github.io/2016/03/13/EOVA简介/</id>
    <published>2016-03-13T08:38:35.000Z</published>
    <updated>2016-03-13T08:42:35.443Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;Eova 是一个 J2EE 快速开发平台。&lt;/li&gt;
&lt;li&gt;Eova 适用于对 UI 布局和性能没有严苛要求的企业级 WEB 后台管理系统。&lt;/li&gt;
&lt;li&gt;是对Jfinal，easyUI的再次封装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EVOA能做什么&quot;&gt;&lt;a href=&quot;#EVOA能做什么&quot; class=&quot;headerlink&quot; title=&quot;EVOA能做什么&quot;&gt;&lt;/a&gt;EVOA能做什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单表数据的显示，分页，无需代码实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义二级三级菜单，随意DIY。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已经实现的权限管理模块，可自定义用户组，及权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录已实现（目前没有注册功能），可添加用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;DIY查询。&lt;/li&gt;
&lt;li&gt;自定义业务（重写业务拦截器）。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; public String addBefore(AopContext ac) throws Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String c = ac.record.get(&amp;quot;kaipiaoAmount&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String id = ac.record.getStr(&amp;quot;contractId&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String sql = &amp;quot;UPDATE base_contract SET amount=amount-? WHERE id=?;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Db.use(xx.DS_MAIN).update(sql, c, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return super.addBefore(ac);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; java.util.List&amp;lt;Record&amp;gt; list = ac.records;//获取当前所有数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (Record o : list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Integer status = o.get(&amp;quot;status&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (status == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    o.set(&amp;quot;status&amp;quot;, &amp;quot;在线&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    o.set(&amp;quot;status&amp;quot;, &amp;quot;未连接&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;自定义按钮（需要html + BS）。&lt;/li&gt;
&lt;li&gt;简单配置实现文件上传。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EVOA的优势&quot;&gt;&lt;a href=&quot;#EVOA的优势&quot; class=&quot;headerlink&quot; title=&quot;EVOA的优势&quot;&gt;&lt;/a&gt;EVOA的优势&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少了代码编写量，简化了开发过程。&lt;/li&gt;
&lt;li&gt;易于上手&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;详细介绍-有道云笔记链接&quot;&gt;&lt;a href=&quot;#详细介绍-有道云笔记链接&quot; class=&quot;headerlink&quot; title=&quot;详细介绍:有道云笔记链接&quot;&gt;&lt;/a&gt;详细介绍:&lt;a href=&quot;http://note.youdao.com/share/?id=e74a3bc10cc195a5a4c79c7257fcce9b&amp;amp;type=note&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有道云笔记链接&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Eova 是一个 J2EE 快速开发平台。&lt;/li&gt;
&lt;li&gt;Eova 适用于对 UI 布局和性能没有严苛要求的企业级 WEB 后台管理系统。&lt;/li&gt;
&lt;li&gt;是对Jfinal，easyUI的再次封装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EVOA能做什么&quot;&gt;
    
    </summary>
    
    
      <category term="EOVA" scheme="http://wisdombud.github.io/tags/EOVA/"/>
    
  </entry>
  
  <entry>
    <title>java web 之 servlet</title>
    <link href="http://wisdombud.github.io/2016/03/04/java%20web%20%E4%B9%8Bservlet/"/>
    <id>http://wisdombud.github.io/2016/03/04/java web 之servlet/</id>
    <published>2016-03-04T08:38:35.000Z</published>
    <updated>2016-03-13T08:47:41.500Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。&lt;br&gt;Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。&lt;br&gt;最早支持Servlet标准的是JavaSoft的Java Web Server。此后，一些其它的基于Java的Web服务器开始支持标准的Servlet。&lt;/p&gt;
&lt;p&gt;Servlet = Service + Applet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/0/03/JSPLife.svg&quot; alt=&quot;servlet&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Java_Servlet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki–servlet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://baike.baidu.com/view/25169.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/servlet/servlet-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;菜鸟教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rocomp/p/4808924.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cnblogs&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器
    
    </summary>
    
    
      <category term="servlet web" scheme="http://wisdombud.github.io/tags/servlet-web/"/>
    
  </entry>
  
  <entry>
    <title>WEB开发需要解决的问题</title>
    <link href="http://wisdombud.github.io/2016/03/02/WEB%20%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://wisdombud.github.io/2016/03/02/WEB 开发需要解决的问题/</id>
    <published>2016-03-02T08:38:35.000Z</published>
    <updated>2016-03-13T08:47:39.207Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-系统架构&quot;&gt;&lt;a href=&quot;#1-系统架构&quot; class=&quot;headerlink&quot; title=&quot;1. 系统架构&quot;&gt;&lt;/a&gt;1. 系统架构&lt;/h2&gt;&lt;h3 id=&quot;1-1-B-S系统架构&quot;&gt;&lt;a href=&quot;#1-1-B-S系统架构&quot; class=&quot;headerlink&quot; title=&quot;1.1 B/S系统架构&quot;&gt;&lt;/a&gt;1.1 B/S系统架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://s11.sinaimg.cn/mw690/9707fac3hd144196981fa&amp;amp;690&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-2-C-S系统架构&quot;&gt;&lt;a href=&quot;#1-2-C-S系统架构&quot; class=&quot;headerlink&quot; title=&quot;1.2 C/S系统架构&quot;&gt;&lt;/a&gt;1.2 C/S系统架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i7.qhimg.com/t01b21f3bbfda590e1e.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-3-对比与区别&quot;&gt;&lt;a href=&quot;#1-3-对比与区别&quot; class=&quot;headerlink&quot; title=&quot;1.3 对比与区别&quot;&gt;&lt;/a&gt;1.3 对比与区别&lt;/h3&gt;&lt;p&gt;1.3.1 概述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C/S结构，即Client/Server(客户机/服务器)结构，是大家熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，可以充分利用两端硬件环境的优势。早期的软件系统多以此作为首选设计标准。。&lt;br&gt;B/S结构，即Browser/Server(浏览器/服务器)结构，是随着Internet技术的兴起，对C/S结构的一种变化或者改进的结构。在这种 结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现，形成所谓3-tier结构。B/S结构，主要是 利用了不断成熟的WWW浏览器技术，结合浏览器的多种Script语言(VBScript、JavaScript…)和ActiveX技术，用通用浏览器 就实现了原来需要复杂专用软件才能实现的强大功能，并节约了开发成本，是一种全新的软件系统构造技术。随着Windows 98/Windows 2000将浏览器技术植入操作系统内部，这种结构更成为当今应用软件的首选体系结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.3.2 详述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Client/Server一般是建立在局域网的基础上的.Browser/Server一般是建立在广域网的基础上的.&lt;br&gt;1．硬件环境不同:&lt;br&gt;C/S 一般建立在专用的网络上, 小范围里的网络环境, 局域网之间再通过专门服务器提供连接和数据交换服务.&lt;br&gt;B/S 建立在广域网之上的, 不必是专门的网络硬件环境,例与电话上网, 租用设备. 信息自己管理. 有比C/S更强的适应范围, 一般只要有操作系统和浏览器就行&lt;br&gt;2．对安全要求不同&lt;br&gt;C/S 一般面向相对固定的用户群, 对信息安全的控制能力很强. 一般高度机密的信息系统采用C/S 结构适宜. 可以通过B/S发布部分可公开信息.&lt;br&gt;B/S 建立在广域网之上, 对安全的控制能力相对弱, 面向是不可知的用户群.&lt;br&gt;3．对程序架构不同&lt;br&gt;C/S 程序可以更加注重流程, 可以对权限多层次校验, 对系统运行速度可以较少考虑.&lt;br&gt;B/S 对安全以及访问速度的多重的考虑, 建立在需要更加优化的基础之上. 比C/S有更高的要求 B/S结构的程序架构是发展的趋势, 从MS的.Net系列的asp.net, java的servlet，python的django等.&lt;br&gt;4．系统维护不同&lt;br&gt;C/S 程序由于整体性, 必须整体考察, 处理出现的问题以及系统升级. 升级难. 可能是再做一个全新的系统。对于用户来说C/S升级维护需要重新安装一个程序.&lt;br&gt;B/S 构件组成,方面构件个别的更换,实现系统的无缝升级.  对于用户来说最多是刷新下页面。&lt;br&gt;5．操作系统不同&lt;br&gt;C/S 程序可以处理用户面固定, 并且在相同区域, 安全要求高需求, 与操作系统相关. 应该都是相同的系统&lt;br&gt;B/S 建立在广域网上, 面向不同的用户群, 分散地域, 这是C/S无法作到的. 与操作系统平台关系最小.&lt;br&gt;6．对本地接口的调用不同&lt;br&gt;C/S 多是建立的Window平台上,需要对本地API接口操作较多.&lt;br&gt;B/S 建立在浏览器上,浏览器都会有沙箱，对本地API接口操作必须通过浏览器才可以完成.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通讯协议不同&lt;br&gt;C/S一般是自建通讯协议，大部分是基于TCP或者SOCKET之上重新定义业务通讯协议&lt;br&gt;B/S 通讯协议是HTTP协议，已经规定好通讯协议，不可改变&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-前端&quot;&gt;&lt;a href=&quot;#2-前端&quot; class=&quot;headerlink&quot; title=&quot;2. 前端&quot;&gt;&lt;/a&gt;2. 前端&lt;/h2&gt;&lt;p&gt;指的是浏览器端（B端）的技术，相当于C/S中的C，只是C是固定的（浏览器）&lt;/p&gt;
&lt;p&gt;浏览器固定了哪些东西：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;UI的技术：HTML+CSS+JS&lt;/li&gt;
&lt;li&gt;通讯的协议：HTTP&lt;/li&gt;
&lt;li&gt;对本地API的操作：上传文件等&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;B端存在几种常见的浏览器：Chrome，IE，FireFox等。不同的浏览器基于标准实现的具体细节不一样。因此需要考虑浏览器兼容性问题。&lt;/p&gt;
&lt;h2 id=&quot;3-后端&quot;&gt;&lt;a href=&quot;#3-后端&quot; class=&quot;headerlink&quot; title=&quot;3. 后端&quot;&gt;&lt;/a&gt;3. 后端&lt;/h2&gt;&lt;p&gt;需要解决的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析HTTP协议—-一般由WEB服务器完成，tomcat等各种（也可以自己写socket，接收http请求，自己封装）&lt;/li&gt;
&lt;li&gt;业务处理&lt;br&gt; 数据的验证&lt;br&gt; 数据保存&lt;/li&gt;
&lt;li&gt;页面响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本流程是这些，所以抽象出来一些所谓的框架及技术。&lt;br&gt;java：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Servlet技术（将HTTP的解析、页面响应与业务处理区分开），分为WEB服务器（Tomcat等）和应用程序（各种war包）
&amp;gt; 页面响应技术： JSP、servlet、freemarker等等
&amp;gt; 业务处理：各种MVC的后端框架（spring mvc、Struts等）
&amp;gt; 数据处理：hibernate、spring jdbc等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;python：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Python Web服务器网关接口（或者缩写为WSGI，读作“wizgy”），将WEB服务器和应用程序分开
&amp;gt; django 业务处理各种等
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-参考&quot;&gt;&lt;a href=&quot;#4-参考&quot; class=&quot;headerlink&quot; title=&quot;4. 参考&quot;&gt;&lt;/a&gt;4. 参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://python.jobbole.com/81523/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.jobbole.com/81523/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=JE-Xpf-h0uBKCl3wPK9GQQ0U3tqtcql2ra_d1368tdQQ6FOGpiCunES9MYmH6gTfn5IJPJfBlkvP5C82QYHqOSFmW3BUhegxCCq0ixk7VJz-M9CT0YznLBnzCWc-5jCD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/link?url=JE-Xpf-h0uBKCl3wPK9GQQ0U3tqtcql2ra_d1368tdQQ6FOGpiCunES9MYmH6gTfn5IJPJfBlkvP5C82QYHqOSFmW3BUhegxCCq0ixk7VJz-M9CT0YznLBnzCWc-5jCD&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://zhidao.baidu.com/link?url=YK05yEAorh3NkdMX2oA1y6pTwZjCl7qMzCdXPgNCRwbbHYb-V6J7nnF0c_PRpolZbfB-T3cLwrKbO-Aph5f4YXdkFkvm-4SL5AXTdGN-DIy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhidao.baidu.com/link?url=YK05yEAorh3NkdMX2oA1y6pTwZjCl7qMzCdXPgNCRwbbHYb-V6J7nnF0c_PRpolZbfB-T3cLwrKbO-Aph5f4YXdkFkvm-4SL5AXTdGN-DIy&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-系统架构&quot;&gt;&lt;a href=&quot;#1-系统架构&quot; class=&quot;headerlink&quot; title=&quot;1. 系统架构&quot;&gt;&lt;/a&gt;1. 系统架构&lt;/h2&gt;&lt;h3 id=&quot;1-1-B-S系统架构&quot;&gt;&lt;a href=&quot;#1-1-B-S系统架构&quot; class=&quot;head
    
    </summary>
    
    
      <category term="web" scheme="http://wisdombud.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>WEB基础</title>
    <link href="http://wisdombud.github.io/2016/03/01/WEB%20%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
    <id>http://wisdombud.github.io/2016/03/01/WEB 基础内容/</id>
    <published>2016-03-01T08:38:35.000Z</published>
    <updated>2016-03-13T08:47:38.362Z</updated>
    
    <content type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;##什么是WEB&lt;br&gt;Web（万维网World Wide Web的简称）是个包罗万象的万花筒，不同的人从不同的角度观察，对于Web究竟是什么会得出大不相同的观点。作为Web开发者，我们需要从技术上来理解Web。从技术架构层面上看，Web的技术架构包括了四个基石：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URI：统一资源标识（URL:统一资源定位 URI+LOCATION）&lt;br&gt;HTTP: 超文本传输协议&lt;br&gt;HyperText（除了HTML外，也可以是带有超链接的XML或JSON）&lt;br&gt;MIME(多用途互联网邮件扩展)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;发展历程&quot;&gt;&lt;a href=&quot;#发展历程&quot; class=&quot;headerlink&quot; title=&quot;发展历程&quot;&gt;&lt;/a&gt;发展历程&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;静态内容阶段：在这个最初的阶段，使用Web的主要是一些研究机构。Web由大量的静态HTML文档组成，其中大多是一些学术论文。Web服务器可以被看作是支持超文本的共享文件服务器。&lt;/li&gt;
&lt;li&gt;CGI程序阶段：在这个阶段，Web服务器增加了一些编程API。通过这些API编写的应用程序，可以向客户端提供一些动态变化的内容。Web服务器与应用程序之间的通信，通过CGI（Common Gateway Interface）协议完成，应用程序被称作CGI程序。&lt;/li&gt;
&lt;li&gt;脚本语言阶段：在这个阶段，服务器端出现了ASP、PHP、JSP、ColdFusion等支持session的脚本语言技术，浏览器端出现了Java Applet、JavaScript等技术。使用这些技术，可以提供更加丰富的动态内容。&lt;/li&gt;
&lt;li&gt;瘦客户端应用阶段：在这个阶段，在服务器端出现了独立于Web服务器的应用服务器。同时出现了Web MVC开发模式，各种Web MVC开发框架逐渐流行，并且占据了统治地位。基于这些框架开发的Web应用，通常都是瘦客户端应用，因为它们是在服务器端生成全部的动态内容。&lt;/li&gt;
&lt;li&gt;RIA应用阶段：在这个阶段，出现了多种RIA（Rich Internet Application）技术，大幅改善了Web应用的用户体验。应用最为广泛的RIA技术是DHTML+Ajax。Ajax技术支持在不刷新页面的情况下动态更新页面中的局部内容。同时诞生了大量的Web前端DHTML开发库，例如Prototype、Dojo、ExtJS、jQuery/jQuery UI等等，很多开发库都支持单页面应用（Single Page Application）的开发。其他的RIA技术还有Adobe公司的Flex、微软公司的Silverlight、Sun公司的JavaFX（现在为Oracle公司所有）等等。&lt;/li&gt;
&lt;li&gt;移动Web应用阶段：在这个阶段，出现了大量面向移动设备的Web应用开发技术。除了Android、iOS、Windows Phone等操作系统平台原生的开发技术之外，基于HTML5的开发技术也变得非常流行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上述Web开发技术的发展过程看，Web从最初其设计者所构思的主要支持静态文档的阶段，逐渐变得越来越动态化。Web应用的交互模式，变得越来越复杂：从静态文档发展到以内容为主的门户网站、电子商务网站、搜索引擎、社交网站，再到以娱乐为主的大型多人在线游戏、手机游戏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考文献：&quot;&gt;&lt;a href=&quot;#参考文献：&quot; class=&quot;headerlink&quot; title=&quot;参考文献：&quot;&gt;&lt;/a&gt;参考文献：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://coolshell.cn/articles/6043.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web开发中需要了解的东西&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/15213/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web开发：我希望得到的编程学习路线图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RubyLouvre/agate/issues/8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么做java的web开发我们会使用struts2，springMVC和spring这样的框架?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19834302&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;零基础的前端开发初学者应如何系统地学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webclks.com/archives/2806&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web的前世今生&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;##什么是WEB&lt;br&gt;Web（万维网World Wide Web的简称）是个包罗万象的万花筒，不同的人从不同的角度观察，对于Web究竟是什么会得出大不相同的观点。作为Web开发者，我们需要从技术上来理解Web。从技术架构层面上看，Web的技术架构
    
    </summary>
    
    
      <category term="web" scheme="http://wisdombud.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>日志简介</title>
    <link href="http://wisdombud.github.io/2016/03/01/%E6%97%A5%E5%BF%97/"/>
    <id>http://wisdombud.github.io/2016/03/01/日志/</id>
    <published>2016-03-01T08:38:35.000Z</published>
    <updated>2016-03-13T08:47:21.451Z</updated>
    
    <content type="html">&lt;h2 id=&quot;为什么需要日志&quot;&gt;&lt;a href=&quot;#为什么需要日志&quot; class=&quot;headerlink&quot; title=&quot;为什么需要日志&quot;&gt;&lt;/a&gt;为什么需要日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为项目上线后不允许你调试，你只能通过Log来分析问题。项目出问题时，你要能拿出Log证明自己负责的部分没有问题，如果是自己的问题，要从Log里快速找出错误原因。如果没有从Log里找出错误原因，那一定是一件很悲催的事情，特别是在bug不容易重现的情况下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;哪些地方打日志&quot;&gt;&lt;a href=&quot;#哪些地方打日志&quot; class=&quot;headerlink&quot; title=&quot;哪些地方打日志&quot;&gt;&lt;/a&gt;哪些地方打日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   打log的目的是为了迅速排错或在有争议时拿出证据证明自己。基于这个目的，log不在多，只要抓住一切对自己有利的信息，就可以了。
　&lt;/p&gt;
&lt;h3 id=&quot;LOG的级别及对应日志&quot;&gt;&lt;a href=&quot;#LOG的级别及对应日志&quot; class=&quot;headerlink&quot; title=&quot;LOG的级别及对应日志　&quot;&gt;&lt;/a&gt;LOG的级别及对应日志　&lt;/h3&gt;&lt;p&gt;Log最常用的级别就是DEBUG，INFO，WARN，ERROR，其他的很少用。如何运用合适的Log级别也是非常重要的，在不该用ERROR的地方用了ERROR，可能会给你带来额外的麻烦。&lt;br&gt;　1.ERROR：&lt;br&gt;　　ERROR是错误的意思，但不代表出现异常的地方就该打ERROR。我认为ERROR是相对程序正确运行来说的，如果出现了ERROR那就代表出问题了，开发人员必须要查一下原因，或许是程序问题，或许是环境问题，或许是理论上不该出错的地方出错了。总之，如果你觉得某个地方出问题时需要解决，就打ERROR，如果不需要解决就不要打ERROR。&lt;br&gt;　　举例来说，如果有一个接口。调用者传过来的参数不在你的接受范围内，在这种情况下你不能打ERROR，因为传什么值是用户决定的，并不影响程序正确运行。想象一下，如果你的服务器上有监控程序的话，检测到ERROR或WARN就报警，参数错误你也打ERROR，那运维人员会疯掉的。&lt;br&gt;　　如果做一个对讲机，在解析语音数据包时出错了，那就要打ERROR了，因为这个是理论上不该出错的地方，要不就是你的解析代码有问题，要不就是开发人员在拼凑语音包时存在问题，这个时候需要你来找出问题的原因。所以应该打ERROR。&lt;br&gt;　　2.WARN：&lt;br&gt;　　WARN是指出现了不影响程序正确运行的问题，WARN也是问题但不影响程序正常运行，如果WARN出现的过于频繁或次数太多，那就代表你要检查一下程序或环境或依赖程序是否真的出问题了。&lt;br&gt;　　假如你访问一个接口，设置了一个超时，超时之后会抛异常，你在try块里不该打ERROR也不该打INFO来无视它，这时你应该打WARN，紧紧是警告一下，如果超时过多那就该检查一下了，是不是对方接口有问题了或者是网络环境出问题了。&lt;br&gt;　　3.INFO和DEBUG：&lt;br&gt;　　ERROR和WARN是指有问题，而INFO和DEBUG就是指一般的信息了。在程序出问题时，如果这条log可以帮助你分析问题或查看程序的运行情况，那就应该打个INFO。如果仅仅是为了在调试阶段查看程序是否运行正确那就要打DEBUG。前边讨论的接口参数错误问题，就应该打个INFO了，调用者说你的接口总是返回错误代码，你可以告诉他，是他的哪个参数传错了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;常见日志点&quot;&gt;&lt;a href=&quot;#常见日志点&quot; class=&quot;headerlink&quot; title=&quot;常见日志点&quot;&gt;&lt;/a&gt;常见日志点&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.函数开始结束处&lt;br&gt;　　在重要函数的开始结束出应该打上log ，这样在看log时会比较直观，什么时候开始什么时候结束就会一目了然，万一中间出异常导致程序退出了，也知道是在哪个函数突然中断的。也同样适用于一个重要逻辑块的开始结束。&lt;br&gt;2.返回结果&lt;br&gt;　　尽量在重要函数或web接口的每个返回分支打印返回结果。在出现不好分析的异常时，从细节下手，这时log会派上用场。如果跟合作方在数据方面出现争议也可以及时拿出证据。&lt;br&gt;3.添加Exception异常的捕获&lt;br&gt;　　如果你在代码中捕获了某种异常，那你要在try块后添加Exception的捕获，以防出现运行时异常中断程序。&lt;br&gt;4.务必打印堆栈信息&lt;br&gt;　　在异常捕获代码中务必要将堆栈信息打印出来，否则打了那么多的log可能会功亏一篑。&lt;br&gt;5.多线程的log&lt;br&gt;　　在多线程的程序中，log最好要标记thredId，否则可能不知道是哪个线程的作业，也无法有条理的来观察一个线程。&lt;br&gt;6.成功失败标志&lt;br&gt;　　如果某个函数是做一件比较关键的事情，那么这件事情成功还是失败了，要打印log，否则关键事件运行结果如何都拿不出证据的话，实在是不能让人信服。&lt;br&gt;7.前后log的关系&lt;br&gt;　　如果是web程序或接口，那log就不是按照你预定的顺序出现的，可能是好几个响应的log穿插在一起的。代码里如果有几条log前后存在一定的数据关系，那么要将这几条log的关联信息打出来，用来确定是针对同一个响应的。如果没有明确的标志，很难说后边的log跟前边的log是同一个响应或者是针对同一条数据。&lt;br&gt;8.关于耗时&lt;br&gt; 　　访问一个第三方接口、上传下载文件等可能耗时的操作，都要记录完成这个操作所耗的时间。否则程序性能出了问题，你不知道是网络原因呢，还是你调用的第三方接口性能出现问题呢，还是你自己程序的问题呢。&lt;br&gt;9.关于数量&lt;br&gt; 　　涉及到数量的操作要打印log，比如查询数据库和批量拷贝文件、上传下载、批量格式转换等批量操作，设计到的数量要打印出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;误区&quot;&gt;&lt;a href=&quot;#误区&quot; class=&quot;headerlink&quot; title=&quot;误区&quot;&gt;&lt;/a&gt;误区&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;有异常一定打日志么？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;需要什么样的日志&quot;&gt;&lt;a href=&quot;#需要什么样的日志&quot; class=&quot;headerlink&quot; title=&quot;需要什么样的日志&quot;&gt;&lt;/a&gt;需要什么样的日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;时间、类名及函数名，行号、线程号等等&lt;/p&gt;
&lt;h2 id=&quot;有哪些已经封装好的日志&quot;&gt;&lt;a href=&quot;#有哪些已经封装好的日志&quot; class=&quot;headerlink&quot; title=&quot;有哪些已经封装好的日志&quot;&gt;&lt;/a&gt;有哪些已经封装好的日志&lt;/h2&gt;&lt;h3 id=&quot;slf4j&quot;&gt;&lt;a href=&quot;#slf4j&quot; class=&quot;headerlink&quot; title=&quot;slf4j&quot;&gt;&lt;/a&gt;slf4j&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/f1194361820/p/5096014.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/f1194361820/p/5096014.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;log4j配置&quot;&gt;&lt;a href=&quot;#log4j配置&quot; class=&quot;headerlink&quot; title=&quot;log4j配置&quot;&gt;&lt;/a&gt;log4j配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://summerbell.iteye.com/blog/487736&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://summerbell.iteye.com/blog/487736&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;log4net配置&quot;&gt;&lt;a href=&quot;#log4net配置&quot; class=&quot;headerlink&quot; title=&quot;log4net配置&quot;&gt;&lt;/a&gt;log4net配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jys509/p/4569874.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/jys509/p/4569874.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wangsaiming/archive/2013/01/11/2856253.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wangsaiming/archive/2013/01/11/2856253.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何分析日志&quot;&gt;&lt;a href=&quot;#如何分析日志&quot; class=&quot;headerlink&quot; title=&quot;如何分析日志&quot;&gt;&lt;/a&gt;如何分析日志&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/TalkStudy/archive/2007/12/19/1005886.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/TalkStudy/archive/2007/12/19/1005886.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么需要日志&quot;&gt;&lt;a href=&quot;#为什么需要日志&quot; class=&quot;headerlink&quot; title=&quot;为什么需要日志&quot;&gt;&lt;/a&gt;为什么需要日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为项目上线后不允许你调试，你只能通过Log来分析问题。项目出问题时，你要
    
    </summary>
    
    
      <category term="log" scheme="http://wisdombud.github.io/tags/log/"/>
    
  </entry>
  
</feed>
