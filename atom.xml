<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术博客</title>
  <subtitle>慧萌信安互联网</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wisdombud.github.io/"/>
  <updated>2016-03-30T15:47:21.291Z</updated>
  <id>http://wisdombud.github.io/</id>
  
  <author>
    <name>Joseph</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何写邮件</title>
    <link href="http://wisdombud.github.io/2016/03/30/%E5%A6%82%E4%BD%95%E5%86%99%E9%82%AE%E4%BB%B6/"/>
    <id>http://wisdombud.github.io/2016/03/30/如何写邮件/</id>
    <published>2016-03-30T08:38:35.000Z</published>
    <updated>2016-03-30T15:47:21.291Z</updated>
    
    <content type="html">&lt;h2&gt;关于主题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主题是接收者了解邮件的第一信息，因此要提纲挈领，使用有意义的主题行，这样可以让收件人迅速了解邮件内容并判断其重要性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一定不要空白标题，这是最失礼的&lt;/li&gt;
&lt;li&gt;标题要简短，不宜冗长，不要让Outlook用…才能显示完你的标题&lt;/li&gt;
&lt;li&gt;标题要能真反映文章的内容和重要性，切忌使用含义不清的标题，如“王先生收”&lt;/li&gt;
&lt;li&gt;一封信尽可能只针对一个主题，不在一封信内谈及多件事情，以便于日后整理&lt;/li&gt;
&lt;li&gt;可适当用使用大写字母或特殊字符(如“*!”等)来突出标题，引起收件人注意，但应适度，特别是不要随便就用“紧急”之类的字眼。&lt;/li&gt;
&lt;li&gt;回复对方邮件时，可以根据回复内容需要更改标题，不要RERE一大串。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;关于称呼与问候&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;恰当地称呼收件者，拿捏尺度
邮件的开头要称呼收件人。这既显得礼貌，也明确提醒某收件人，此邮件是面向他的，要求其给出必要的回应;在多个收件人的情况下可以称呼大家、ALL.
如果对方有职务，应按职务尊称对方，如“x经理”;如果不清楚职务，则应按通常的“x先生”、“x小姐”称呼，但要把性别先搞清楚。
不熟悉的人不宜直接称呼英文名，对级别高于自己的人也不宜称呼英文名。称呼全名也是不礼貌的，不要逮谁都用个“Dearxxx”，显得很熟络。&lt;/li&gt;
&lt;li&gt;Email开头结尾最好要有问候语
最简单的开头写一个“HI”，中文的写个“你好”;结尾常见的写个BestRegards，
中文的写个“祝您顺利”之类的也就可以了。
俗话说得好，“礼多人不怪”，礼貌一些，总是好的，即便邮件中有些地方不妥，对方也能平静的看待。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;关于正文&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Email正文要简明扼要，行文通顺
Email正文应简明扼要的说清楚事情;如果具体内容确实很多，正文应只作摘要介绍，然后单独写个文件作为附件进行详细描述。
正文行文应通顺，多用简单词汇和短句，准确清晰的表达，不要出现让人晦涩难懂的语句。最好不要让人家拉滚动条才能看完你的邮件，千万不要学唐僧。&lt;/li&gt;
&lt;li&gt;注意Email的论述语气
根据收件人与自己的熟络程度、等级关系;邮件是对内还是对外性质的不同，选择恰当的语气进行论述，以免引起对方不适。
尊重对方，请、谢谢之类的语句要经常出现。
电子邮件可轻易地转给他人，因此对别人意见的评论必须谨慎而客观。“邮件门”就是深刻的教训!&lt;/li&gt;
&lt;li&gt;Email正文多用1234之类的列表，以清晰明确。
如果事情复杂，最好1、2、3、4的列几个段落进行清晰明确的说明。保持你的每个段落简短不冗长，没人有时间仔细看你没分段的长篇大论。&lt;/li&gt;
&lt;li&gt;一次邮件交待完整信息
最好在一次邮件中把相关信息全部说清楚，说准确。不要过两分钟之后再发一封什么“补充”或者“更正”之类的邮件，这会让人很反感。&lt;/li&gt;
&lt;li&gt;尽可能避免拼写错误和错别字，注意使用拼写检查
这是对别人的尊重，也是自己态度的体现。如果是英文Email，最好把拼写检查功能打开;如果是中文Email，注意拼音输入法带给你的弱智同音别字。
在邮件发送之前，务必自己仔细阅读一遍，检查行文是否通顺，拼写是否有错误。&lt;/li&gt;
&lt;li&gt;合理提示重要信息
不要动不动就用大写字母、粗体斜体、颜色字体、加大字号等手段对一些信息进行提示。合理的提示是必要的，但过多的提示则会让人抓不住重点，影响阅度。&lt;/li&gt;
&lt;li&gt;合理利用图片，表格等形式来辅助阐述
对于很多带有技术介绍或讨论性质的邮件，单纯以文字形式很难描述清楚。如果配合图表加以阐述，收件人一定会表扬你的体贴。&lt;/li&gt;
&lt;li&gt;不要动不动使用：)之类的笑脸字符，在商务信函里面这样显得比较轻佻
BusinessEmail不是你的情书，所以：)之类的最好慎用。只用在某些你确实需要强调出一定的轻松气氛的场合，比如现在-：)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;附件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果邮件带有附件，应在正文里面提示收件人查看附件&lt;/li&gt;
&lt;li&gt;附件文件应按有意义的名字命名，不可用外星人才看懂的文件名&lt;/li&gt;
&lt;li&gt;正文中应对附件内容做简要说明，特别是带有多个附件时&lt;/li&gt;
&lt;li&gt;附件数目不宜超过4个，数目较多时应打包压缩成一个文件&lt;/li&gt;
&lt;li&gt;如果附件是特殊格式文件，因在正文中说明打开方式，以免影响使用&lt;/li&gt;
&lt;li&gt;如果附件过大(不宜超过2MB)，应分割成几个小文件分别发送&lt;/li&gt;
&lt;li&gt;如果附件内容比较少，那就别发附件了&lt;/li&gt;
&lt;li&gt;office的，尽量低版本&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;语言的选择和汉字编码&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;选择便于阅度的字号和字体&lt;/strong&gt;
中文老实点用宋体或新宋体，英文就用Verdana或Arial字型，字号用五号或10号字即可。这是经研究证明最适合在线阅度的字号和字体。不要用稀奇古怪的字体或斜体，最好不用背景信纸，特别对公务邮件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;结尾签名&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;每封邮件在结尾都应签名，这样对方可以清楚的知道发件人信息。虽然你的朋友可能从发件人中认出你，但不要为你的朋友设计这样的工作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;签名信息不宜过多
电子邮件消息末尾加上签名档是必要的。签名档可包括姓名、职务、公司、电话、传真、地址等信息，但信息不宜行数过多，一般不超过4行。你只需将一些必要信息放在上面，对方如果需要更详细的信息，自然会与你联系。
引用一个短语作为你的签名的一部分是可行的，比如你的座右铭，或公司的宣传口号。但是要分清收件人对象与场合，切记一定要得体。&lt;/li&gt;
&lt;li&gt;不要只用一个签名档
对内、对私、对熟悉的客户等群体的邮件往来，签名档应该进行简化。过于正式的签名档会让与对方显得疏远。你可以在Outlook中设置多个签名档，灵活调用。&lt;/li&gt;
&lt;li&gt;签名档文字应选择与正文文字匹配，简体、繁体或英文，以免成出现乱码。字号一般应选择比正文字体小一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;回复技巧&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;及时回复Email
收到他人的重要电子邮件后，即刻回复对方一下，往往还是必不可少的，这是对他人的尊重，理想的回复时间是2小时内，特别是对一些紧急重要的邮件。
对每一份邮件都立即处理是很占用时间的，对于一些优先级低的邮件可集中在一特定时间处理，但一般不要超过24小时。
如果事情复杂，你无法及时确切回复，那至少应该及时的回复说“收到了，我们正在处理，一旦有结果就会及时回复，云云”。不要让对方苦苦等待，记住：及时作出响应，哪怕只是确认一下收到了。
如果你正在出差或休假，应该设定自动回复功能，提示发件人，以免影响工作。&lt;/li&gt;
&lt;li&gt;进行针对性回复
当回件答复问题的时候，最好把相关的问题抄到回件中，然后附上答案。不要用简单的，那样太生硬了，应该进行必要的阐述，让对方一次性理解，避免再反复交流，浪费资源。&lt;/li&gt;
&lt;li&gt;回复不得少于10个字
对方给你发来一大段邮件，你确只回复“是的”、“对”、“谢谢”、“已知道”等字眼，这是非常不礼貌的。怎么着也要凑够10个字，显示出你的尊重。&lt;/li&gt;
&lt;li&gt;不要就同一问题多次回复讨论，不要盖高楼
如果收发双方就同一问题的交流回复超过3次，这只能说明交流不畅，说不清楚。此时应采用电话沟通等其他方式进行交流后再做判断。电子邮件有时并不是最好的交流方式。
对于较为复杂的问题，多个收件人频繁回复，发表看法，把邮件越RE越高，这将导致邮件过于冗长笨拙而不可阅读。此时应即是对之前讨论的结果进行小结，删减瘦身，突出有用信息。
5.要区分Reply和ReplyAll(区分单独回复和回复全体)
如果只需要单独一个人知道的事，单独回复给他一个人就行了
如果你对发件人提出的要求作出结论响应，应该replayall，让大家都知道;不要让对方帮你完成这件事情。
如果你对发件人的提出的问题不清楚，或有不同的意见，应该与发件人单独沟通，不要当着所有人的面，不停的RE来RE去，与发件人讨论。你们讨论好了再告诉大家。不要向上司频繁发送没有确定结果的邮件。
点击“回复全部”前，要三思而行!&lt;/li&gt;
&lt;li&gt;主动控制邮件的来往
为避免无谓的回复，浪费资源，可在文中指定部分收件人给出回复，或在文末添上以下语句：“全部办妥”、“无需行动”、“仅供参考，无需回复”。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;正确使用发送，抄送，密送&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;要区分To和CC还有BCC(区分收件人、抄送人、秘送人)
1.To的人是要受理这封邮件所涉及的主要问题的，理应对邮件予以回复响应。
2.而CC的人则只是需要知道这回事，CC的人没有义务对邮件予以响应，当然如果CC的人有建议，当然可以回Email.
3.而BCC是秘送，即收信人是不知道你发给了BCC的人了的。这个可能用在非常规场合。
4.TO，CC中的各收件人的排列应遵循一定的规则。比如按部门排列;按职位等级从高到低或从低到高都可以。适当的规则有助于提升你的形象!
5.只给需要信息的人发送邮件，不要占用他人的资源
6、转发邮件要突出信息
在你转发消息之前，首先确保所有收件人需要此消息。除此之外，转发敏感或者机密信息要小心谨慎，不要把内部消息转发给外部人员或者未经授权的接收人。
如果有需要还应对转发邮件的内容进行修改和整理，以突出信息。不要将RE了几十层的邮件发给他人，让人摸不着头脑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;归结到底，两句话：只发有必要的邮件，认真发邮件!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;关于主题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主题是接收者了解邮件的第一信息，因此要提纲挈领，使用有意义的主题行，这样可以让收件人迅速了解邮件内容并判断其重要性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一定不要空白标题，这是最失礼的&lt;/li&gt;
&lt;li&gt;标题要简短，不宜冗长，不要
    
    </summary>
    
      <category term="常识" scheme="http://wisdombud.github.io/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="Email" scheme="http://wisdombud.github.io/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>javascript基本类型</title>
    <link href="http://wisdombud.github.io/2016/03/28/JavaScript%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://wisdombud.github.io/2016/03/28/JavaScript基本类型/</id>
    <published>2016-03-28T13:33:17.816Z</published>
    <updated>2016-03-28T13:34:55.467Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;什么是基本类型？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基本类型是指直接&lt;strong&gt;包含值&lt;/strong&gt;的类型；&lt;/li&gt;
&lt;li&gt;基本类型是单个值，而不是复杂的对象，基本类型不是面向对象的；&lt;/li&gt;
&lt;li&gt;基本类型具有明确的取值范围和数学行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript基本类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在JavaScript中四种基本（或者五种）的数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;number  数值（整数和实数）。
JavaScript中所有的数字，无论是整数还是小数，其类型均为Number。
在程序内部，Number类型的实质是一个64位的浮点数，
因此，JavaScript中所有的数都是浮点数。
JavaScript所能表示的数值范围为正负1.7976931348623157乘以10的308次方，
其最小所能表示的小数为正负5乘以10的负324次方，这两个边界值可以分别通过访问Number对象的MAX_VALUE属性和MIN_VALUE属性来获取。&lt;/p&gt;
&lt;p&gt;示例:
var num1 = 012; //八进制的10
var num1 = 0xA; //十六进制的10
var a = 0.1;//浮点数值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string  字符串型（用“”号或‘&#39;括起来的字符或数值）。
var str =&#39;123&#39;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boolean 布尔型（使True或False表示）。&lt;/p&gt;
&lt;p&gt;var str = &amp;quot;helloworld&amp;quot;;
document.write(Boolean(str)); //true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null    空值。&lt;/p&gt;
&lt;p&gt;示例:
var num = null;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;undefined   声明变量但未对其进行初始化。&lt;/p&gt;
&lt;p&gt;示例：
var number;
document.write(number); //undefined&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是基本类型？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基本类型是指直接&lt;strong&gt;包含值&lt;/strong&gt;的类型；&lt;/li&gt;
&lt;li&gt;基本类型是单个值，而不是复杂的对象，基本类型不是面向对象的；&lt;/li&gt;
&lt;li&gt;基本类型具有
    
    </summary>
    
      <category term="javacript" scheme="http://wisdombud.github.io/categories/javacript/"/>
    
    
      <category term="js" scheme="http://wisdombud.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>urlrewrite基本介绍</title>
    <link href="http://wisdombud.github.io/2016/03/28/urlrewrite/"/>
    <id>http://wisdombud.github.io/2016/03/28/urlrewrite/</id>
    <published>2016-03-28T13:32:47.516Z</published>
    <updated>2016-03-28T13:49:27.032Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;what is urlrewrite ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UrlRewrite就是我们通常说的地址重写，可实现网页的伪静态化。&lt;/p&gt;
&lt;p&gt;example:
浏览器请求:http://localhost/hello.html
服务器将把这个请求重定向为：http://localhost/helloAction?method=hello&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;why is it ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一：提高安全性，可以有效的避免一些参数名、ID等完全暴露在用户面前，如果用户随便乱输的话，不符合规则的话直接会返回个404或错误页面，这比直接返回500或一大堆服务器错误信息要好的多;&lt;/li&gt;
&lt;li&gt;二：美化URL，去除了那些比如*.do之类的后缀名、长长的参数串等，可以自己组织精简更能反映访问模块内容的URL;&lt;/li&gt;
&lt;li&gt;三：更有利于搜索引擎的收入，通过对URL的一些优化，可以使搜索引擎更好的识别与收录网站的信息;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;usual urlrewrite tool&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大多数的javaweb框架如springMVC、struts都支持url重写，但是不够灵活。
tuckey urlrewrite 下载地址http://tuckey.org/urlrewrite/dist/urlrewritefilter-2.6.zip&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;usage mode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在web.xml中加入拦截器&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;UrlRewriteFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;org.tuckey.web.filters.urlrewrite.UrlRewriteFilter&amp;lt;/filter-class&amp;gt;
    &amp;lt;init-param&amp;gt;
    &amp;lt;param-name&amp;gt;logLevel&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;WARN&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;/filter&amp;gt;
    &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;UrlRewriteFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;dispatcher&amp;gt;REQUEST&amp;lt;/dispatcher&amp;gt;
    &amp;lt;dispatcher&amp;gt;FORWARD&amp;lt;/dispatcher&amp;gt;
    &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在WEB-INF目录下创建urlrewrite.xml配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE urlrewrite PUBLIC &amp;quot;-//tuckey.org//DTD UrlRewrite3.2//EN&amp;quot;&amp;quot;\\urlrewrite3.2.dtd&amp;quot;&amp;gt;
&amp;lt;urlrewrite&amp;gt;
&amp;lt;rule&amp;gt;
&amp;lt;note&amp;gt;123&amp;lt;/note&amp;gt;
&amp;lt;note&amp;gt;123&amp;lt;/note&amp;gt;
&amp;lt;from&amp;gt;/([A-Za-z0-9]+).action&amp;lt;/from&amp;gt;
&amp;lt;to type=&amp;quot;forward&amp;quot;&amp;gt;/view/$1.jsp&amp;lt;/to&amp;gt;
&amp;lt;/rule&amp;gt;
...
&amp;lt;rule&amp;gt;&amp;lt;/rule&amp;gt;
&amp;lt;/urlrewrite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对urlrewrite.xml节点的简介&lt;/p&gt;
&lt;p&gt;需要转化的链接不能直接写在a标签中，需要写在c:url或其他服务器需要解析的变量中，这样才能对其重      新显示
note:注释你所配置的信息(可有多个)
from:代表你在访问网站的时候，浏览器地址栏中显示的URL
to:代表将浏览器中显示的URL转换后的地址，也就是你网站中真正访问的URL&lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;rule&amp;gt;
    &amp;lt;from&amp;gt;^/page/(.*)$&amp;lt;/from&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;to&amp;gt;/page/$1.jsp&amp;lt;/to&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;我们访问 http://localhost:8080/first 
而实际我们访问的是http://localhost:8080/first.jsp
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;urlrewrite.xml是utf-8.所以如果你要在rule上加note标签为中文的话,也一定是要utf-8.&lt;/li&gt;
&lt;li&gt;UrlRewriteFilter 最好是配置在web.xml的前面filter上,不然有可能对有些url转变失去作用.&lt;/li&gt;
&lt;li&gt;urlrewrite属性:有仅只有一个,rule属性::至少一个.&lt;/li&gt;
&lt;li&gt;在写rule的时,如果有多个参数时，中间的连接符号&amp;amp;应该是&amp;amp;&lt;/li&gt;
&lt;li&gt;对于中文参数要使用(.*)作为参数转义.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;具体DTD解释请参考：http://wenku.baidu.com/view/e9a44a3467ec102de2bd89fc.html?re=view&lt;/li&gt;
&lt;li&gt;tuckey urlrewrite官网:http://tuckey.org/urlrewrite&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;what is urlrewrite ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UrlRewrite就是我们通常说的地址重写，可实现网页的伪静态化。&lt;/p&gt;
&lt;p&gt;example:
浏览器请求:http://l
    
    </summary>
    
      <category term="web" scheme="http://wisdombud.github.io/categories/web/"/>
    
    
      <category term="urlrewrite" scheme="http://wisdombud.github.io/tags/urlrewrite/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder</title>
    <link href="http://wisdombud.github.io/2016/03/28/StringBuilder%E7%AE%80%E4%BB%8B/"/>
    <id>http://wisdombud.github.io/2016/03/28/StringBuilder简介/</id>
    <published>2016-03-28T13:32:40.372Z</published>
    <updated>2016-03-28T13:50:24.228Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;StringBuilder是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;StringBuilder是一个可变的字符序列。
但StringBuilder在单线程中的性能比StringBuffer高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一般用在字符串缓冲区被单个线程使用的时候&lt;/strong&gt;。
如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。&lt;/li&gt;
&lt;li&gt;StringBuilder类可以用于在无需创建一个新的字符串对象情况下修改字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;StringBuilder StringBuffer String 区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;StringBuilder提供一个与 StringBuffer 兼容的 API，但不保证同步。&lt;/li&gt;
&lt;li&gt;StringBuilder不是线程安全的，而StringBuffer是线程安全的。&lt;/li&gt;
&lt;li&gt;StringBuilder，StringBuffer可以用于在无需创建一个新的字符串对象情况下修改字符串&lt;/li&gt;
&lt;li&gt;String类是字符串常量，是不可更改的常量。
因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String&lt;/li&gt;
&lt;li&gt;StringBuffer，StringBuilder是字符串变量，它的对象是可以扩充和修改的。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;StringBuilder 的 append 和 insert&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;append 方法始终将这些字符添加到生成器的末端；&lt;/li&gt;
&lt;li&gt;insert 方法则在指定的点添加字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.Text.StringBuilder s = new System.Text.StringBuilder();
s.append(&amp;quot;start&amp;quot;);
//s.insert(4,&amp;quot;le&amp;quot;);
s.append(&amp;quot;le&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;
s.append(&amp;quot;le&amp;quot;) 将使字符串生成器包含“startle”，
而 s.insert(4, &amp;quot;le&amp;quot;) 将更改字符串生成器，使之包含“starlet”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特殊情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String 对象的字符串拼接其实是被 JVM 解释成了StringBuffer或StringBuilder对象的拼接 String
效率是远要比 StringBuffer或StringBuilder快。&lt;/p&gt;
&lt;p&gt;String S1 = “This is only a” + “ simple” + “ test”;
StringBuilder S2 =new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);&lt;/p&gt;
&lt;p&gt;String s1 = “This is only a” + “ simple” + “test”;
String s2  = “This is only a simple test”;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VM会将s1直接视为s2;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当然，非字符串拼接StringBuilder比String+String快；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String S2 = “This is only a”;
String S3 = “ simple”;
String S4 = “ test”;
String S1 = S2 +S3 + S4;&lt;/p&gt;
&lt;p&gt;StringBuilder s =new StringBuilder();
s.append(&amp;quot;This is only a&amp;quot;);
s.append(&amp;quot; simple&amp;quot;);
s.append(&amp;quot; test&amp;quot;);&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;StringBuilder是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;StringBuilder是一个可变的字符序列。
但StringBuilder在单线程中的性能比StringBuffer高。&lt;/li&gt;
&lt;li&gt;&lt;strong
    
    </summary>
    
      <category term="java" scheme="http://wisdombud.github.io/categories/java/"/>
    
    
      <category term="String" scheme="http://wisdombud.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的日期格式</title>
    <link href="http://wisdombud.github.io/2016/03/24/MySQL%E7%9A%84%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/"/>
    <id>http://wisdombud.github.io/2016/03/24/MySQL的日期格式/</id>
    <published>2016-03-24T08:38:35.000Z</published>
    <updated>2016-03-24T07:09:34.397Z</updated>
    
    <content type="html">&lt;h2&gt;MySQL的五种时间和日期类型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;YEAR表示年份：字节数为1，取值范围为“1901——2155”
DATE表示日期：字节数为4，取值范围为“1000-01-01——9999-12-31”
TIME表示时间：字节数为3，取值范围为“-838:59:59——838:59:59”
DATETIME和TIMESTAMP表示日期和时间
DATETIME：字节数为8，取值范围为“1000-01-01 00:00:00——9999-12-31 23:59:59”
TIMESTAMP，字节数为4，取值范围为“19700101080001——20380119111407”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;给各种时间日期类型赋值&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;给YEAR赋值有3种方式
&lt;em&gt;方式一：&lt;/em&gt;
直接插入4位字符串(&amp;quot;1998&amp;quot;)或者4位数字(1998)
&lt;em&gt;方式二：&lt;/em&gt;
插入两位字符串(&amp;quot;04&amp;quot;)
如果范围是&amp;quot;00&amp;quot;-&amp;quot;69&amp;quot;,则相当于插入&amp;quot;2000&amp;quot;-&amp;quot;2069&amp;quot;
如果范围是&amp;quot;70&amp;quot;-&amp;quot;99&amp;quot;,则相当于插入&amp;quot;1970&amp;quot;-&amp;quot;1999&amp;quot;
&lt;strong&gt;注：&amp;quot;0&amp;quot;和&amp;quot;00&amp;quot;的效果一样都表示2000年&lt;/strong&gt;
&lt;em&gt;方式三：&lt;/em&gt;
插入两位数字(90)
插入数字和插入字符的区别在于，插入一位0表示的不是2000年，而是0000.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;给TIME赋值
&lt;strong&gt;TIME类型表示为“时：分：秒”，尽管小时范围一般是0~23，但是为了表示某些特殊时间间隔，MySQL将TIME的小时范围扩发了，而且支持负值。&lt;/strong&gt;
标准格式是&amp;quot;HH：MM：SS&amp;quot;,但是不一定是这种格式,可以是&amp;quot;D HH：MM：SS&amp;quot;、&amp;quot;HH：MM&amp;quot;、&amp;quot;SS&amp;quot;、&amp;quot;D HH&amp;quot;、&amp;quot;D HH：MM&amp;quot;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;D HH：MM：SS&amp;quot;相当于是&amp;quot;（D*24+HH）：MM：SS&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eg：插入的是&amp;quot;2 23:50:50&amp;quot;=&amp;quot;71:50:50&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;HH：MM&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eg:&amp;quot;11:25&amp;quot;=&amp;quot;11:25:00&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;SS&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eg:&amp;quot;30&amp;quot;=&amp;quot;00:00:30&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;给DATE赋值
标准格式是&amp;quot;YYYY-MM-DD&amp;quot;、其他的还有&amp;quot;YYYY@MM@DD&amp;quot;、&amp;quot;YYYY.MM.DD&amp;quot;等
还可以用&amp;quot;YY-MM-DD&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;给DATETIME赋值
标准格式为&amp;quot;YYYY-MM-DD HH：MM：SS&amp;quot;
具体赋值方法与上面各种类型的方法相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;给TIMESTAMP赋值
TIMESTAMP的取值范围比较小，没有DATETIME的取值范围大，因此输入值时一定要保证在TIMESTAMP的范围之内。它的插入也与插入其他日期和时间数据类型类似。
&lt;strong&gt;插入当前时间
第一，可以使用CURRENT_TIMESTAMP；
第二，输入NULL，系统自动输入当前的TIMESTAMP；
第三，无任何输入，系统自动输入当前的TIMESTAMP。
另外有很特殊的一点：TIMESTAMP的数值是与时区相关。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当 MySQL遇到一个日期或时间类型的超出范围或对于该类型不合法的值时，它将该值转换为该类的&amp;quot;零&amp;quot;值。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;列类型:&amp;quot;零&amp;quot;值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DATETIME:&amp;apos;0000-00-00 00:00:00&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DATE:&amp;apos;0000-00-00&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TIMESTAMP:00000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TIME:&amp;apos;00:00:00&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;YEAR:0000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;datetime和timestamp的区别&lt;/h2&gt;
&lt;p&gt;datetime&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;占用8个字节&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;允许为空值，可以自定义值，系统不会自动修改其值。&lt;/li&gt;
&lt;li&gt;实际格式储存&lt;/li&gt;
&lt;li&gt;与时区无关&lt;/li&gt;
&lt;li&gt;不可以设定默认值，所以在不允许为空值的情况下，必须手动指定datetime字段的值才可以成功插入数据。&lt;/li&gt;
&lt;li&gt;可以在指定datetime字段的值的时候使用now()变量来自动插入系统的当前时间。
结论：datetime类型适合用来记录数据的原始的创建时间，因为无论你怎么更改记录中其他字段的值，datetime字段的值都不会改变，除非你手动更改它。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;timestamp&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;占用4个字节&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;允许为空值，但是不可以自定义值，所以为空值时没有任何意义。&lt;/li&gt;
&lt;li&gt;TIMESTAMP值不能早于1970或晚于2037。这说明一个日期，例如&#39;1968-01-01&#39;，虽然对于DATETIME或DATE值是有效的，但对于TIMESTAMP值却无效，如果分配给这样一个对象将被转换为0。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;值以UTC格式保存&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;时区转化 ，存储时对当前的时区进行转换，检索时再转换回当前的时区。&lt;/li&gt;
&lt;li&gt;默认值为CURRENT_TIMESTAMP()，其实也就是当前的系统时间。&lt;/li&gt;
&lt;li&gt;数据库会自动修改其值，所以在插入记录时不需要指定timestamp字段的名称和timestamp字段的值，你只需要在设计表的时候添加一个timestamp字段即可，插入后该字段的值会自动变为当前系统时间。&lt;/li&gt;
&lt;li&gt;若是设置了&lt;strong&gt;ON UPDATE CURRENT_TIMESTAMP&lt;/strong&gt;以后任何时间修改表中的记录时，对应记录的timestamp值会自动被更新为当前的系统时间。
结论：timestamp类型适合用来记录数据的最后修改时间，因为只要你更改了记录中其他字段的值，timestamp字段的值都会被自动更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;timestamp的默认值&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;自动UPDATE 和INSERT 到当前的时间
&#39;CREATE_TIME&#39; timestamp NOT NULL DEFAULT &lt;strong&gt;CURRENT_TIMESTAMP&lt;/strong&gt;  &lt;strong&gt;ON UPDATE CURRENT_TIMESTAMP&lt;/strong&gt;&lt;br&gt;
自动INSERT 到当前时间，不过不自动UPDATE
&#39;CREATE_TIME&#39; timestamp NOT NULL DEFAULT &lt;strong&gt;CURRENT_TIMESTAMP&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CURRENT_TIMESTAMP&lt;/strong&gt;
系统时间
&lt;strong&gt;ON UPDATE CURRENT_TIMESTAMP&lt;/strong&gt;
修改现有记录的时候都对这个数据列刷新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/huangzhen/archive/2011/08/21/2147938.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;timestamp的默认值&lt;/a&gt;
&lt;a href=&quot;http://www.jb51.net/article/31872.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;timestamp的默认值2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;慧聘中的实际应用&lt;/h2&gt;
&lt;p&gt;拿慧聘项目职位表为例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们需要记录职位的创建时间和最新的更新时间。创建时间只在insert的时候新建一个时间戳，而更新时间则是，只要有对这条数据的更新操作，就更改时间戳。
timestamp的ON UPDATE CURRENT_TIMESTAMP属性，会让数据库来帮我们在update的时候自动更新时间。
注意：图形化界面来创建表的时候，默认值都是null，不是CURRENT_TIMESTAMP。就是说数据库不会自动在insert的时候，插入当前时间戳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrnr1.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308185547.png&quot; alt=&quot;cmd-markdown-logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图形化界面的自动update，需要勾选上图中的 根据当前时间戳更新选项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Mysql查看表的创建sql&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SHOW CREATE TABLE  BASE_USER&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;MySQL的五种时间和日期类型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;YEAR表示年份：字节数为1，取值范围为“1901——2155”
DATE表示日期：字节数为4，取值范围为“1000-01-01——9999-12-31”
TIME表示时间：字节数为3，取值范围为“
    
    </summary>
    
      <category term="数据库" scheme="http://wisdombud.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="date" scheme="http://wisdombud.github.io/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>java 注解</title>
    <link href="http://wisdombud.github.io/2016/03/24/java%20%E6%B3%A8%E8%A7%A3/"/>
    <id>http://wisdombud.github.io/2016/03/24/java 注解/</id>
    <published>2016-03-24T08:38:35.000Z</published>
    <updated>2016-03-24T07:08:24.951Z</updated>
    
    <content type="html">&lt;h2&gt;注解是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Java提供了一种原程序中的元素关联任何信息和任何元数据的途径和方法。
注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;注解的作用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注解的作用：分三种。源码/编译/运行时
编写文档：通过代码里标识的元数据生成文档
代码分析：通过代码里标识的元数据对代码进行分析
编译检查：通过代码里标识的元数据让编译器能够实现基本的编译检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;注解的分类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;根据注解在程序的哪个阶段分类
源码注解：注解只在源码中存在，编译成.class文件就不存在了
编译时注解：注解在源码和.class文件中都存在
运行时注解：在运行阶段还会起作用，甚至会影响运行逻辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;根据来源分类：
JDK自带的注解
常见的第三方注解
自定义注解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;java中常见的注解&lt;/h2&gt;
&lt;p&gt;jdk自带注解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@Override  覆盖了父类的方法。 以后在见到的时候，可以直接相信这个类。
@Deprecated   父类有一个方法，已经过时，但是为了兼容以前的类。加这个注释。
@Suppvisewarnings
当父类的方法加了@Deprecated 之后，子类在引用的时候会有警告。加注释3。忽略警告。
这三个都是修饰方法的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见第三方注解(Spring) ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@Autowired    可以对成员变量、方法和构造函数进行标注，来完成自动装配的工作
@Service   一般用在service层
@Repository  一般用在dao层&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;元注解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;元注解的作用就是负责注解其他注解。&lt;/li&gt;
&lt;li&gt;元注解包括：&lt;br&gt;
@Target 注解的作用域
@Retention 注解的生命周期
@Inherited  标识性的，表示这个注解允许子类继承的
@Documented 生成javadoc时会包含注解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;@Target 注解的作用域&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;@Target  说明了Annotation所修饰的对象范围，在Annotation类型的声明中使用了target可更加明晰其修饰的目标。
作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）
@Target的取值(ElementType)有：
	CONSTRUCTOR:用于描述构造器
	FIELD:用于描述域
	LOCAL_VARIABLE:用于描述局部变量
	METHOD:用于描述方法
	PACKAGE:用于描述包
	PARAMETER:用于描述参数
	TYPE:用于描述类、接口(包括注解类型) 或enum声明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;@Retention 注解的生命周期&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;@Retention  定义了该Annotation被保留的时间长短（可以在源码上、.class文件中、）
作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）
@Retention的取值（RetentionPoicy）有：
	SOURCE:在源文件中有效（即源文件保留）CLASS:在class文件中有效（即class保留）RUNTIME:在运行时有效（即运行时保留）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;@Inherited  标识性的，表示这个注解允许子类继承的&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。
	@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;@Documented 生成javadoc时会包含注解。&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;自定义注解&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;public @interface Description{
String dese();
String author();
int age() default 18;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用@interface关键字定义注解&lt;/li&gt;
&lt;li&gt;方法。成员以无参、无异常的方式声明。&lt;/li&gt;
&lt;li&gt;可以给成员指定默认值。成员的类型是受到限制的。包括java的原始类型和String、Class、Annotation、Enumeration&lt;/li&gt;
&lt;li&gt;如果注解只有一个成员变量，则成员取名为value()，在使用使用时可以忽略成员名和赋值号。&lt;/li&gt;
&lt;li&gt;注解类可以没有成员，没有成员的注解成为标识注解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于自定义注解的使用，希望大家再学习学习
使用自定义注解
@&amp;lt;注解名&amp;gt;（&amp;lt;成员名1&amp;gt;=&amp;lt;成员值1&amp;gt;，&amp;lt;成员名2&amp;gt;=&amp;lt;成员值2&amp;gt;，...）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;注解是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Java提供了一种原程序中的元素关联任何信息和任何元数据的途径和方法。
注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明
    
    </summary>
    
      <category term="java" scheme="http://wisdombud.github.io/categories/java/"/>
    
    
      <category term="Annotation" scheme="http://wisdombud.github.io/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>局域网传输速率的限制</title>
    <link href="http://wisdombud.github.io/2016/03/24/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>http://wisdombud.github.io/2016/03/24/局域网传输速率的限制/</id>
    <published>2016-03-24T08:38:35.000Z</published>
    <updated>2016-03-24T07:18:07.445Z</updated>
    
    <content type="html">&lt;h2&gt;1.网络传输单位和存储单位的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;平常我们所说的10M或者100M网络,指的是100Mbps(bit per second),100Mbit每秒;而我们通常的100M文件大小,值得是100MByte.100M只是量词,网络传输和文件存储的单位不同,因为1Byte=8bit,所以理论上我们所说的100M传输速度的网络,转换成文件存储可以达到12.5MByte/s.
当然12.5MByte/s只是一个理论值,在正常的网络传输受到其网络传输环境、网卡接口限制、硬盘读写速率以及CPU等多方面因素，实际传输的速度并不会达到理论值。在百兆的局域网中，通常在10MByte/s左右.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2.网卡的限制&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;按照传输速率可以将网卡分为10Mbps、100Mbps、10/100Mbps自适应网卡、1000Mbps以及10GMbps网卡,大多数电脑都采用100Mbps和10/100Mbps的网卡,所以也根据网卡的限制,理论上局域网的最高传输速度只能达到12.5M/s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3.双绞线的限制&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;双绞线常见的有三类、五类、超五类和六类线，三类线已经逐渐的被五类线取代，六类线适用于1Gbps以上的传输,日常构建局域网最常用的就是五类(100M)双绞线,理论值同样是12.5M/s.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;1.网络传输单位和存储单位的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;平常我们所说的10M或者100M网络,指的是100Mbps(bit per second),100Mbit每秒;而我们通常的100M文件大小,值得是100MByte.100M只是量词,网络传输和文
    
    </summary>
    
      <category term="常识" scheme="http://wisdombud.github.io/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="net" scheme="http://wisdombud.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>meta keywords</title>
    <link href="http://wisdombud.github.io/2016/03/24/meta%20keywords/"/>
    <id>http://wisdombud.github.io/2016/03/24/meta keywords/</id>
    <published>2016-03-24T08:38:35.000Z</published>
    <updated>2016-03-24T07:08:35.788Z</updated>
    
    <content type="html">&lt;p&gt;标签 meta的 keyword提供了网页的关键字信息,以方便搜索引擎在分类网页的时候使用,具体如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.keywords提供的网页关键词通常是为搜索引擎分类网页使用的；
2.可以为网页提供多个关键词，多个关键词应该使用空格分开；
3.不要给网页定义过多的关键词，最好保持在10个以下，过多的关键词，搜索引擎将忽略；
4不要给网页定义与网页描述内容无关的关键词；
5.由于网页制作者滥用keywords(提供过多的关键词或者提供与网页无关的关键词)，导致目前常用的搜索引擎降低了keywords的重要性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;keyword设计的初衷是为搜索引擎提供分类参考,但是因为以前可以用更多的关键字来获取更好的搜索引擎排名,所以导致了现在很多搜索引擎将meta的keyword属性看的并不是很重要,甚至特意的避开keyword.
&lt;a href=&quot;http://www.chinaz.com/web/2011/1019/214529.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于慎用meta keyword的建议的建议&lt;/a&gt;
如果必须要用keyword的时候，关键字的个数尽量不要太多，关键字太多时常常被搜索引起忽略，所以建议在使用keyword的时候尽量不要太多
关于meta标签,除了比标识网页关键字之外,还可以用来标识网页的内容,网页重定向等功能.
&lt;a href=&quot;http://www.haorooms.com/post/html_meta_ds&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meta标签的补充使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;标签 meta的 keyword提供了网页的关键字信息,以方便搜索引擎在分类网页的时候使用,具体如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.keywords提供的网页关键词通常是为搜索引擎分类网页使用的；
2.可以为网页提供多个关键词，多个关键词应该使用空格分开；

    
    </summary>
    
      <category term="web" scheme="http://wisdombud.github.io/categories/web/"/>
    
    
      <category term="meta" scheme="http://wisdombud.github.io/tags/meta/"/>
    
  </entry>
  
  <entry>
    <title>SSH</title>
    <link href="http://wisdombud.github.io/2016/03/24/SSH%205W%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wisdombud.github.io/2016/03/24/SSH 5W学习/</id>
    <published>2016-03-24T06:28:01.102Z</published>
    <updated>2016-03-24T07:05:17.328Z</updated>
    
    <content type="html">&lt;h2&gt;what&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH的英文全称为Secure Shell，是IETF（Internet Engineering Task Force）的Network Working Group所制定的一族协议，其目的是要在非安全网络上提供安全的远程登录和其他安全网络服务。 我们可以简单理解为：Rlogin和Telnet等的替代方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.SSH主要的三个协议&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;传输层协议:通过服务器认证,数据机密性,信息完整性等支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用户认证协议:为服务器提供客户端的身份鉴别&lt;/li&gt;
&lt;li&gt;连接协议:将加密的信息隧道复用成若干个逻辑通道,提供给更高层的应用协议使用;各种高层应用协议可以相对独立于SSH基本体系之外,并依靠这个基本框架,通过连接协议使用SSH的安全机制.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.SSH安全验证级别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于口令的安全验证:只要你知道自己的账号和口令,就可以登录到远程主机.所有传输的数据都会被加密,但是不能保证你正在连接的服务器就是你想要连接的服务器,有可能是冒充的&amp;quot;中间人&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于密匙的安全验证:
&lt;ul&gt;
&lt;li&gt;现为自己创建一对密匙,并把公匙放在需要访问的服务器上&lt;/li&gt;
&lt;li&gt;客户端软件向服务器发送请求,请求用你的密匙进行安全验证
-服务器收到请求,在服务器目录下寻找公匙并与你发过来的公匙进行比较.如果公匙相同,服务器就会用公匙加密&amp;quot;质询&amp;quot;并把它发送给客户端软件;&lt;/li&gt;
&lt;li&gt;客户端软件受到&amp;quot;质询&amp;quot;之后就可以用私匙解密病把它发送给服务器.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;第二种方式可以有效地避免&amp;quot;中间人&amp;quot;攻击方式,相对安全,但是整个登录过程时间比较长,大概要10s左右.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;SSH的工作过程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;实现ＳＳＨ安全连接，服务器端和客户端要经理五个阶段：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;版本协商阶段&lt;/strong&gt;：SSH目前有SSH1和SSH2两个版本,双发通过版本协商确定使用的版本.(本阶段服务器会打开22端口,等待客户端连接;本阶段的报文都是通过明文方式传输)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;密钥和算法协商阶段&lt;/strong&gt;:双方根据本端和对端支持的算法,协商最终使用的算法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认证阶段&lt;/strong&gt;:SSH客户端向服务器端发起认证请求,服务器端对客户端进行认证&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会话请求阶段&lt;/strong&gt;:认证通过后,客户端想服务器端发起会话请求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互会话阶段&lt;/strong&gt;:会话请求通过后,服务器端和客户端进行信息的交互.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;why&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;传统的网络服务程序,如ftp/pop/telnet在网络传输的时候都会用明文传送口令和数据,所以在本质上都是不安全的.这些服务器的安全验证方式容易受到&amp;quot;中间人&amp;quot;方式的攻击.
&amp;quot;中间人&amp;quot;攻击方式--即&amp;quot;中间人&amp;quot;冒充真正的服务器接受你发送给服务器的数据,然后再冒充你把数据传给真正的服务器.服务器和你之间的数据传送很容易被中间人做一些手脚.
而通过使用ssh,你可以吧所有传输的数据进行加密,避免了&amp;quot;中间人&amp;quot;攻击方式以及DNS欺骗和IP欺骗.另外,使用SSH时传输的数据是经过压缩的,所以可以加快传输的速度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;where&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先,最常见的应用就是通过SSH登录到远方的机器执行你想要进行的工作和命令.(SSH在不安全的网路通讯环境中可以通过很强的验证机制和非常安全的通讯环境.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;其次,通过使用SSH可以本地主机和远程服务器之间是指&amp;quot;加密通道&amp;quot;(SSH的加密通多是通过&amp;quot;端口转发&amp;quot;实现的,你可以在本地端口(没有用到的)和在远程服务器上运行某个服务的端口之间建立&amp;quot;加密通道&amp;quot;.然后只要连接到本地端口.所有对本地端口的请求都被SSH加密并且转发到远程服务器的端口.当然只有远程服务器上运行SSH服务器软件的时候&amp;quot;加密通道&amp;quot;才能工作)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;how&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;putty WINscp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;相关链接&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;http://blog.csdn.net/macrossdzh/article/details/56919
http://blog.csdn.net/oncoding/article/details/4365062&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;what&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH的英文全称为Secure Shell，是IETF（Internet Engineering Task Force）的Network Working Group所制定的一族协议，其目的是要在非安全网络上提供安全的远程
    
    </summary>
    
      <category term="常识" scheme="http://wisdombud.github.io/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="SSH" scheme="http://wisdombud.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>SQL JOIN 连接</title>
    <link href="http://wisdombud.github.io/2016/03/24/SQL%20JOIN%20%E8%BF%9E%E6%8E%A5/"/>
    <id>http://wisdombud.github.io/2016/03/24/SQL JOIN 连接/</id>
    <published>2016-03-24T06:28:01.097Z</published>
    <updated>2016-03-24T07:06:26.414Z</updated>
    
    <content type="html">&lt;h2&gt;1.什么是join(连接)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JOIN(连接)是sql的操作之一,如果我们想根据两个或以上的表的列之间的关系来对这些表进行查询,就应该考虑使用join&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2.什么时候使用join&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当需要进行多表联查的时候&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3.join(连接)的分类&lt;/h2&gt;
&lt;p&gt;例表:
学生表student:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;成绩表mark:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;marks&lt;/th&gt;
&lt;th&gt;studentId&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;3.1内连接(INNER JOIN)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;INNER JOIN是我们最经常用到连接,只返回两个表中连接字段相等的行,我们经常会写到这样的连接查询:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.mark &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a ,marks &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studentId&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以写成:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.marks &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studentId&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以当我们只想要得到两张表的关联信息的时候,我们就可以用inner join 所以结果是;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;marks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;3.2左/右外连接&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;外链接分为左外连接和右外链接.左连接会返回左表所有的行和右表与之相匹配的行,如果左表的行的数据在右表中没有找到相匹配的数据,那么返回集中相对应的右表的信息就会用null填充.
例如我们对上边的表进行左连接:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.mark &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = b.studentId&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以写成
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.mark &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studentId&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回结果是:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;mark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如表中,结果集中将student表中所有的行以及mark表中与student表中相关的行都查找出来,而student表中在mark表中没有相匹配行的&amp;quot;王五&amp;quot;的&amp;quot;mark&amp;quot;就是null
所以当我们想获得左表中全部消息同时把右表中相关联的信息显示出来的时候,我们就可以用做链接.比如我们想打印一个班级里每个人的成绩,但是有熊孩子交了白卷,但是我们还是要打印出他的名字来,就可以用左连接.&lt;/p&gt;
&lt;p&gt;相同的,右连接就是把右表的所有行都显示出来,然后在左表中有匹配信息的就显示出来,没有匹配的行就显示为null:
如:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.mark &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studnetId&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;mark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;3.3全连接&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;全连接full join会返回左表和右表中的所有行。当某行在另一表中没有匹配行，则另一表中的列返回空值,所以当我们不光想知道左右两表的匹配行,还想知道他们没有匹配到的行,就可以用full join例如:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; ,b.mark &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studentid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特别的,mysql是不支持 full join的&lt;/strong&gt;(T.T害我来回打了好多遍sql语句),但是可以通过以下语句来实现全连接:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studentid &lt;span class=&quot;keyword&quot;&gt;UNION&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=b.studentid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上语句,先执行了左查询,再执行右查询,将两个结果集去重,即如果如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;mark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;3.4交叉连接&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;交叉连接(cross join)是一种没有where语句的查询,使用交叉连接会返回两个数据表的笛卡尔积,即他返回的行数是两张表行数乘积.
//至于情况下使用交叉连接,交叉连接到底有什么用还没有搞清楚-.-&lt;/p&gt;
&lt;p&gt;可以在交叉连接后面跟上where语句,但是这个where语句是对结果集进行操作的,并没有影响到交叉连接本身.
同样的内外连接都可以在其后跟上where来对结果集进行操作,但是where的条件是作用于结果集而不是在执行内外连接的过程中限制的.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.5相关知识点&lt;/strong&gt;:&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;on and与on where的区别&lt;/strong&gt;:&lt;/h4&gt;
&lt;p&gt;on是指限制连接操作的条件,他会影响执行内外执行结果;而where是对内外连接的结果集进行操作的.也就是说,当执行连接语句的时候,会先取on后面跟的条件,多个条件通过and连接,执行完以后会得到一个结果集,得到结果集之后再执行where语句,对结果集进行筛选,得到最后我们想要得到结果集.
例如我们分别执行下面两条语句:
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.mark &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = b.studentid &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; b.mark=&lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;           //&lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,b.mark &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; student &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; mark &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = b.studentid &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; b.mark=&lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;         //&lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ON AND 的执行结果:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;mark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;张三&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;王五&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;明显的,on and返回的是一个左连接查询的结果集,说明and连接的两个条件都用来当做左连接的限制条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ON  WHERE的执行结果&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;mark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;李四&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看出,我们可以看一下3.2里左连接语句的执行结果,然后在加上这个where语句的限制,正好查询结果能够对上,说明where语句是对left join的结果集进行操作的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;4相关知识点连接:&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://blog.csdn.net/jiuqiyuliang/article/details/10474221&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详解SQL Server连接（内连接、外连接、交叉连接）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://blog.csdn.net/jklfjsdj79hiofo/article/details/40399265&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL Full Join的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://blog.csdn.net/killerggf/article/details/6216102&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQL的内连接与外连接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;http://www.xue163.com/wenba/328/3286407.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQL左右连接中的on and和on where的区别&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;1.什么是join(连接)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JOIN(连接)是sql的操作之一,如果我们想根据两个或以上的表的列之间的关系来对这些表进行查询,就应该考虑使用join&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2.什么时候使用join&lt;/h2&gt;

    
    </summary>
    
      <category term="数据库" scheme="http://wisdombud.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://wisdombud.github.io/tags/SQL/"/>
    
      <category term="JOIN" scheme="http://wisdombud.github.io/tags/JOIN/"/>
    
  </entry>
  
  <entry>
    <title>SVN的trunk &amp;branch &amp;tags</title>
    <link href="http://wisdombud.github.io/2016/03/24/SVN%E7%9A%84trunk%20&branch%20&tags/"/>
    <id>http://wisdombud.github.io/2016/03/24/SVN的trunk &branch &tags/</id>
    <published>2016-03-24T06:17:43.423Z</published>
    <updated>2016-03-24T06:21:18.735Z</updated>
    
    <content type="html">&lt;h2&gt;trunk(主干)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;主干目录, 在SVN中, 代码一般是放置在此.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;branch(分支)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Branchs目录,和Trunk目录平级， 新建Branch则放置在Branchs目录下.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;tags&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;tags目录为tag存档目录（软件开发版本的标识，一般情况不允许修改）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;应用场景&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1)客户提出新需求时, 会修改项目中的部分代码, 而此时又有bug需要修复,
在trunk中修改bug或者开发新需求时,会影响另一方的工作.
此时应创建branch, 在不干扰trunk的情况下，和trunk并行开发.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;操作&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;标签和分支的操作原理相同，在此只截图了分支操作。
在工程目录上右键，依次选择&amp;quot;team&amp;quot; -&amp;gt; &amp;quot;Branch/tag...&amp;quot;，
在弹出窗口的&amp;quot;To URL&amp;quot;中填入分支的地址， 在这里目标revision选择HEAD revision，
点击ok分支便建立了。

1.右键 --&amp;gt;team --&amp;gt; 分支/标记
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/d3101915gw1ez7hdiv7awj20j50kbdjd.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 2.选择分支路径, 一般会放在branches目录下
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/small/d3101915gw1ez7hdjofouj20fq0axq4y.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3.选择版本号，也可选择工作空间的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/d3101915gw1ez7hdkm94hj20fq0axdh4.jpg&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4.注释,可选择直接切换至分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/d3101915gw1ez7hdmfbx6j20fq0ax401.jpg&quot; alt=&quot;4&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5.可以在仓库的branches文件下看到新建的分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdn30uuj20ic09qgn1.jpg&quot; alt=&quot;5&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6.切换至分支或者主干
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/d3101915gw1ez7hdor7uij20mi0kqtcn.jpg&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7.选择切换的路径
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdqk26uj20gu0mtjx0.jpg&quot; alt=&quot;7&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8.切换后， 项目名称后会有分支or主干的标志
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdquy0dj20c7063t9h.jpg&quot; alt=&quot;8&quot;&gt;
&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdru5vvj20bi05idgf.jpg&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;9.合并分支,合并前一定要先更新、提交，保证代码均保存到repository
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdswxp0j20mg0khq77.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10.选择合并分支的方式，
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Merge a range of revisions&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从主干合并到分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reintegrate a branch&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从分支合并到主干&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change-set based merge&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;将主干上的修改合并到分支，需要Collabnet软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Merge two different trees&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;合并2个分支到主干&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manually record merge information&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从主干到分支，手工指定不需要合并的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manually remove merge information&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从主干到分支，手工指定要合并的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/d3101915gw1ez7hducg5sj20ur0kbadz.jpg&quot; alt=&quot;10&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;11.选择合并的目标url
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/d3101915gw1ez7hdvn1eej20ur0kbgp7.jpg&quot; alt=&quot;11&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;12.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/d3101915gw1ez7hdwsonyj20ur0kbdkx.jpg&quot; alt=&quot;12&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;13.合并操作的结果统计
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/d3101915gw1ez7hdxrv4rj20el0eztao.jpg&quot; alt=&quot;13&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;14.合并记录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdyg41xj20p507lwfz.jpg&quot; alt=&quot;14&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;15.合并后的效果,要把合并过来的代码再提交至repository，至此合并分支就结束了，
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1ez7hdzyjwqj20r20hawlj.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;trunk(主干)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;主干目录, 在SVN中, 代码一般是放置在此.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;branch(分支)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Branchs目录,和Trunk目录平级， 新建Branch则放置在Branchs
    
    </summary>
    
      <category term="scm" scheme="http://wisdombud.github.io/categories/scm/"/>
    
    
      <category term="svn" scheme="http://wisdombud.github.io/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse新建类详解</title>
    <link href="http://wisdombud.github.io/2016/03/24/Eclipse%E6%96%B0%E5%BB%BA%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>http://wisdombud.github.io/2016/03/24/Eclipse新建类详解/</id>
    <published>2016-03-24T06:16:38.476Z</published>
    <updated>2016-03-24T06:19:37.829Z</updated>
    
    <content type="html">&lt;h2&gt;Source Folder、Package&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;源文件，就是存放java源文件(未编译)的文件夹。当然也包括一些package文件夹,还可以包含其他文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;package,source folder,folder&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在eclipse下,package,source folder,folder都是文件夹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrnr1.com1.z0.glb.clouddn.com/java.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中src/main/java 就是source folder
com.wisdombud.wisdomhr.spider.base就是package&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;异同：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相同：
package和source folder一样，除了java文件也可以包含其他文件。
项目构建后,两者里面的java自动编译成class文件到相应的/web-inf/classes文件夹中,其他文件也会移到/web-inf/classes相应的目录下
不同：
1.sourceFolder靠&amp;quot;/&amp;quot;来进行上下级划分，package靠&amp;quot;.&amp;quot;来进行上下级划分。如上图
2.source folder下能建package,而package下不能建source folder
3.java文件中的package属性是按package路径来进行赋值的，source folder路径不参与java文件的package属性赋值，再由第二条不同得到结论，所有source folder下的java文件package属性都为空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;package:当你在建立一个package时,它自动建立到source folder
下,也只能建立在这个目录之下.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;folder:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;里面可以放入任何文件.包括java源文件,jar文件,其他文件(例如,图片,声音等)。如果里面含有java源文件,不管程序是否正确,eclipse都不会报错,把它们当做普通文件处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;package,source folder,folder 之间相互转换 查看参考文章&lt;/p&gt;
&lt;h2&gt;Enclosing type&lt;/h2&gt;
&lt;p&gt;新建类的时候，勾上这个选项，表示新建的是一个内部类。而它在哪个类的内部，需要选择。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内部类是指在一个类的内部再定义一个类。内部的这个类名不需要和文件夹名相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内部类可以是静态static的，也可用public，default，protected和private修饰。（而外部类【即类名和文件名相同的类】只能使用public和default）&lt;/li&gt;
&lt;li&gt;内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和它内部的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用内部类的好处&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内部类可以很好的实现隐藏
一般的非内部类，是不允许有 private 与protected权限的，但内部类可以&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内部类拥有外围类的所有元素的访问权限&lt;/li&gt;
&lt;li&gt;可以实现多重继承&lt;/li&gt;
&lt;li&gt;可以避免修改接口而实现同一个类中两种同名方法的调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Name&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;新建类的名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Modifiers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrnr1.com1.z0.glb.clouddn.com/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里修饰类的词只有4个选项。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;并且选择上，上面的public和package是互斥的。
public表示该类是公共的，都可以访问的。
package表示只有同一个包下的类才可以访问这个类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;虽然abstract和final可以同时选择，但是这两个是不能同时选择的。
abstract表示抽象类，类里面一定有抽象方法，抽象方法一定要子类来实现。
这与final不能继承 互斥。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Superclass&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;要继承的父类(单继承)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Interfaces&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;要实现的接口(多实现)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;自动生成选项&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrnr1.com1.z0.glb.clouddn.com/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;public static void main(String[] args)  --入口函数；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Constructors from superclass --生成构造函数；&lt;/li&gt;
&lt;li&gt;Inherited abstract methods --如果你继承的类存在abstract方法，会自动生成需实现的方法;&lt;/li&gt;
&lt;li&gt;Generate comments --自动生成注释；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/slowly-keeping/archive/2012/04/23/2466054.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Source Folder、Package参考文章&lt;/a&gt;
&lt;a href=&quot;http://www.cnblogs.com/nerxious/archive/2013/01/24/2875649.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内部类参考文章&lt;/a&gt;
&lt;a href=&quot;http://android.blog.51cto.com/268543/384844/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内部类2&lt;/a&gt;
&lt;a href=&quot;http://andy136566.iteye.com/blog/1061951/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内部类3&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;Source Folder、Package&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;源文件，就是存放java源文件(未编译)的文件夹。当然也包括一些package文件夹,还可以包含其他文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;package,source fol
    
    </summary>
    
      <category term="开发工具" scheme="http://wisdombud.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Eclipse" scheme="http://wisdombud.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>域名</title>
    <link href="http://wisdombud.github.io/2016/03/24/%E5%9F%9F%E5%90%8D/"/>
    <id>http://wisdombud.github.io/2016/03/24/域名/</id>
    <published>2016-03-24T06:16:35.039Z</published>
    <updated>2016-03-24T06:20:42.271Z</updated>
    
    <content type="html">&lt;h2&gt;什么是域名&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;IP地址是网络通信中唯一标识一台计算机的符号。由4个小于256的数字组成，但是使用时难以书写和记忆。因此在IP地址的基础上又发展出一种符号化的地址方案，来代替数字型的IP地址。每一个符号化的地址都与特定的IP地址对应。这个与网络上的数字型IP地址相对应的字符型地址，就被称为域名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;域名（Domain Name），是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;域名的例子&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;google.com、baidu.com、163.com 这些都是域名。
http://mail.163.com/index.html
这是一个URL，统一资源定位符。
里面的mail.163.com就是域名。
index.html是根目录下的一种资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;域名的构成&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS规定，域名中的标号都由英文字母和数字组成，每一个标号不超过63个字符，也不区分大小写字母。
标号中除连字符（-）外不能使用其他的标点符号。
级别最低的域名写在最左边，而级别最高的域名写在最右边。
由多个标号组成的完整域名总共不超过255个字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;域名的基本类型&lt;/h2&gt;
&lt;p&gt;级别：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;域名可分为不同级别，包括顶级域名、二级域名、三级域名、注册域名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顶级域名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顶级域名又分为两类：一是国家顶级域名，二是国际顶级域名
200多个国家都按照ISO3166国家代码分配了顶级域名，例如中国是cn，美国是us，日本是jp等.
国际域名例如表示工商企业的.com，表示网络提供商的.net，表示非盈利组织的.org等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二级域名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是指顶级域名之下的域名。
在国际顶级域名下，它是指域名注册人的网上名称，例如ibm、yahoo、microsoft、wisdomhr等；在国家顶级域名下，它是表示注册企业类别的符号，例如com，edu，gov，net等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三级域名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用字母（ A～Z，a～z，大小写等）、数字（0～9）和连接符（－）组成， 各级域名之间用实点（.）连接，三级域名的长度不能超过20个字符。如无特殊原因，建议采用申请人的英文名（或者缩写）或者汉语拼音名 （或者缩写） 作为三级域名，以保持域名的清晰性和简洁性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注册域名查看参考文章。&lt;/p&gt;
&lt;h2&gt;域名服务器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;把域名翻译成IP地址的软件称为域名系统。
它是一种管理名字的方法。
这种方法是：分不同的组来负责各子系统的名字。
系统中的每一层叫做一个域，每个域用一个点分开。所谓域名服务器（即Domain Name Server，简称Name Server）实际上就是装有域名系统的主机。它是一种能够实现名字解析的分层结构数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=qRVuiCQgHiADm-Qya3TJBKE6YuYyS5rUdT0WWUJK1mkFPEr8oG6C3PBNagNwMGVa14ZmNr2g3lTBCjlSwqCRbK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;域名百科&lt;/a&gt;
&lt;a href=&quot;http://baike.baidu.com/link?url=yL7GO0nvypGXRpfdMt7Hl2xIFl8iQyTUVzCLyZatJCiNxIpnm_ycGlkPyFHrF3cDzmV84cGYl030hGZqDI4To_&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;域名服务器百科&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;什么是域名&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;IP地址是网络通信中唯一标识一台计算机的符号。由4个小于256的数字组成，但是使用时难以书写和记忆。因此在IP地址的基础上又发展出一种符号化的地址方案，来代替数字型的IP地址。每一个符号化的地址都与特定的IP地址对应。
    
    </summary>
    
      <category term="常识" scheme="http://wisdombud.github.io/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="域名" scheme="http://wisdombud.github.io/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>端口映射</title>
    <link href="http://wisdombud.github.io/2016/03/24/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    <id>http://wisdombud.github.io/2016/03/24/端口映射/</id>
    <published>2016-03-24T06:16:28.236Z</published>
    <updated>2016-03-24T06:18:33.443Z</updated>
    
    <content type="html">&lt;p&gt;1、端口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的端口不是计算机硬件的I/O端口，而是指TCP/IP协议中的端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、为什么一台服务器可以提供很多种服务呢&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是各种服务采用不用的端口分别提供不同的服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、NAT&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NAT（Network Address Translation，网络地址转换），当在专用网内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。
这种方法需要在专用网连接到因特网的路由器上安装NAT软件。装有NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球IP地址。这样，所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址，才能和因特网连接。
使用少量的公有IP 地址代表较多的私有IP 地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4、动态端口映射&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内网的一台电脑要访问外网，它要像NAT网关发送数据包（包括外网IP、端口、本机IP、本机端口），NAT网关会把本机IP和本机端口改为自己公网的IP、一个未使用的端口（端口B）。并且记下这种映射关系，以便后续传输数据。然后将数据包发送给外网，外网收到数据后做出反应。发送数据到NAT网关的B端口，NAT网关会将数据转发给内网的那台电脑，实现内网和外网的通讯。当连接关闭时，NAT网关会释放B端口，以便别的服务可以使用B端口。这就是动态端口映射。也是NAT网关的工作方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5、静态端口映射&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在NAT网关上开放一个固定的端口，然后设置此端口收到的数据转发给那个内网的IP和端口。不管有没有连接，这个映射关系一直存在。这样可以让公网主动访问内网的电脑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当整个局域网在Internet上只有一个真正的地址的时候，这个IP地址是属于局域网中的服务器独有的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A 类：10.0.0.0～10.255.255.255
B 类：172.16.0.0～172.31.255.255
C 类：192.168.0.0～192.168.255.255
上述三个范围内的地址不会在因特网上被分配，因此可以不必向ISP 或注册中心申请而在公司或企业内部自由使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;补充：
路由器：
实现了将一个网络的数据包发送到另一个网络。提供异构网互联的机制。
路由就是指导IP数据库包发送的路径信息。
路由协议是在路由指导IP数据包发送过程中的事先约定好的规定和标准。&lt;/p&gt;
&lt;p&gt;路由器NAT模式：在传送数据包的同时还要做网络地址的转化（端口映射）
路由模式：只传送数据包，不做网络地址转化。
所以，当内网里传送数据包的时候，不需要NAT&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;1、端口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的端口不是计算机硬件的I/O端口，而是指TCP/IP协议中的端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、为什么一台服务器可以提供很多种服务呢&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是各种服务采用不用的端口分
    
    </summary>
    
      <category term="常识" scheme="http://wisdombud.github.io/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="端口映射" scheme="http://wisdombud.github.io/tags/%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Session 与 Cookie</title>
    <link href="http://wisdombud.github.io/2016/03/24/Session%20%E4%B8%8E%20Cookie/"/>
    <id>http://wisdombud.github.io/2016/03/24/Session 与 Cookie/</id>
    <published>2016-03-24T06:08:57.787Z</published>
    <updated>2016-03-24T06:13:44.674Z</updated>
    
    <content type="html">&lt;h2&gt;背景&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;因为HTTP协议无状态的，服务器无法区分客户端请求,不能保存每次交互的信息，即当服务器返回与请求相对应的应答之后，这次事务的所有信息就都丢掉了。如果用户发来一个新的请求，服务器也无法知道它是否与上次的请求有联系。所以要想服务器与客户端有联系,就要说Cookie与Session。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Cookie&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; Cookie是为了辨别用户身份随HTTP请求一起被传递的数据, 存储在客户端硬盘或内存中，
内容主要包括：名字，值，过期时间，路径和域。。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Session&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Session是客户端和服务端之间的一段交互过程的状态信息，保存在服务器端，Session的id保存在客户机的cookie中，也可以不启用Session。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;联系&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;当客户端通过 HTTP 协议访问服务器，服务器需要创建session的时候，
首先检查请求里是否已包含sessionId，如果已包含，则以前已经为此客户端创建过session，服务器就按照sessionId查询相应信息；也有可能sessionId已经失效，服务器端则会创建新的session；如果客户端请求不包含sessionId，则为此客户端创建一个session，并且生成一个与此session对应的sessionId，sessionId返回给客户端保存，即存储在cookie中，一般cookie的名字默认SEEESIONID.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/d3101915jw1ezi4aek2jqj211c0ec0w1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Cookie的生命周期属性为Max-age，不同浏览器的设置可能不同。不设置过期时间，这个Cookie生命周期为浏览器会话期间，只要关闭浏览器，Cookie就消失了。如果设置了过期时间，浏览器就会把Cookie保存到硬盘上，再次打开浏览器，这些Cookie依然有效直到超过设定的过期时间。
Cookie存储在客户端，安全性低，且大小及个数受浏览器限制。
Session存储在服务器端，安全性高，但影响系统性能，所以Session并不会一直都存在的，一定的时间之后，服务器上的Session就被销毁。
应用：记住密码、及表单重复提交。
将用户名和密码以Cookie的方式存放在客户端，客户端请求一个需要登陆的资源时，重新执行一次登录操作，新建Session，并更新Cookie中的SessionId,由此达到记住密码的功能。
为防止表单的重复提交，为每一次的请求都生成唯一的标识token，并保存在用户的 Session 中，检查请求的token是否与session中的相同，若相同则为不为重复提交，处理请求并删除token，若不同则为重复提交表单。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/yytt123622/article/details/4094990&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;背景&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;因为HTTP协议无状态的，服务器无法区分客户端请求,不能保存每次交互的信息，即当服务器返回与请求相对应的应答之后，这次事务的所有信息就都丢掉了。如果用户发来一个新的请求，服务器也无法知道它是否与上次的请求有联系。所以要想服务器与客户端
    
    </summary>
    
      <category term="WEB" scheme="http://wisdombud.github.io/categories/WEB/"/>
    
    
      <category term="Session" scheme="http://wisdombud.github.io/tags/Session/"/>
    
      <category term="Cookie" scheme="http://wisdombud.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>AMD与CMD规范</title>
    <link href="http://wisdombud.github.io/2016/03/24/AMD%E4%B8%8ECMD%E8%A7%84%E8%8C%83/"/>
    <id>http://wisdombud.github.io/2016/03/24/AMD与CMD规范/</id>
    <published>2016-03-24T06:08:57.785Z</published>
    <updated>2016-03-24T06:12:34.728Z</updated>
    
    <content type="html">&lt;h2&gt;AMD规范&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Asynchronous Module Definition，异步模块加载机制。
描述了模块的定义，依赖关系以及加载机制。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;define([module-name?], [array-of-dependencies?], [module-factory-or-object]);
module-name: 模块的标识,可选参数,省略此参数,模块的名字默认为脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的(不允许相对名字);
array-of-dependencies: 依赖的模块, 可选参数,忽略此参数，默认为[&amp;quot;require&amp;quot;, &amp;quot;exports&amp;quot;, &amp;quot;module&amp;quot;],否则按照位置顺序以参数的形式传入factory;
module-factory-or-object: 模块初始化要执行的函数或对象,如果为函数,有参数列表则不扫描依赖性,否则扫描依赖性。如果是对象，此对象应该为模块的输出值。
示例
define(&#39;test&#39;, [
    &#39;require&#39;,
    &#39;wutil&#39;,
    &#39;template&#39;
],
function(require, wutil, template) {
    //代码
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;(1)require&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;require(&amp;quot;module-name&amp;quot;),返回模块name所代表的模块
define([&#39;require&#39;], function (require) {
    var a = require(&#39;a&#39;);
});
define(function (require, exports, module) {
    var a = require(&#39;a&#39;);
});
require(Array, Function):当模块name所以代表的模块加载完成且可用时，回调函数Function才开始执行，并且只被执行一次。各个模块按照依赖数组中的位置顺序以参数的形式传入到Function里。
define(function (require) {
    require([&#39;a&#39;, &#39;b&#39;], function (a, b) {
        //代码
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;CMD规范&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Common Module Definition 即通用模块定义.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;define(factory);
factory 为对象、字符串时，表示模块的接口就是该对象、字符串。
factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module .
define 也可以接受两个以上参数, define(id?, deps?, factory),我感觉和AMD相同.....
示例
define(&#39;hello&#39;, [&#39;jquery&#39;], function(require, exports, module) {
  // 模块代码
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;(1)require:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;接受模块标识作为唯一的参数，用来获取其他模块提供的接口.
define(function( require, exports ){
    var a = require(&#39;./a&#39;);
    a.doSomething();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;(2)exports:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;factory 的第二个参数，用来向外提供模块接口。
define(function( require, exports ){
    exports.foo = &#39;bar&#39;; // 向外提供的属性
    exports.do = function(){}; // 向外提供的方法
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;(3) module:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;factory的第三个参数，存储了一些与当前模块相关联的属性与方法。
module.id 为模块的唯一标识。
module.uri 根据模块系统的路径解析规则得到模块的绝对路径。
module.dependencies 表示模块的依赖。
module.exports 当前模块对外提供的接口。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;异同&lt;/h2&gt;
&lt;p&gt;AMD规范需要提声明,在依赖数组内.
CMD可以在function内加载.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;AMD规范&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Asynchronous Module Definition，异步模块加载机制。
描述了模块的定义，依赖关系以及加载机制。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;de
    
    </summary>
    
      <category term="javascript" scheme="http://wisdombud.github.io/categories/javascript/"/>
    
    
      <category term="AMD" scheme="http://wisdombud.github.io/tags/AMD/"/>
    
      <category term="CMD" scheme="http://wisdombud.github.io/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化构建工具--Gulp</title>
    <link href="http://wisdombud.github.io/2016/03/24/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/"/>
    <id>http://wisdombud.github.io/2016/03/24/前端自动化构建工具总结/</id>
    <published>2016-03-24T06:08:57.783Z</published>
    <updated>2016-03-24T07:08:10.140Z</updated>
    
    <content type="html">&lt;h2&gt;什么是Gulp&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Gulp是前端开发过程中对代码进行构建的工具,
自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Gulp用法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 安装node.js
&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;
1.2 全局安装Gulp
&lt;code&gt;npm install gulp -g&lt;/code&gt;
1.3 新建package.json文件，项目安装Gulp
&lt;code&gt;npm init.2全局安装&lt;/code&gt;
&lt;code&gt;npm install gulp --save-dev&lt;/code&gt;
1.4 安装Gulp插件
&lt;code&gt;npm install gulp-uglify --save-dev&lt;/code&gt;
1.5 新建gulpfile.js文件
1.6 编写gulpfile.js内容
&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/d3101915gw1f15jm1kseij21ao0skdp4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Gulp的API&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp中文网&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1.1 gulp.src(globs[, options])&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;src方法是指定需要处理的源文件的路径;
globs同watch方法；
options(可选)：类型为Object，有3个属性buffer、read、base；
options.buffer(Boolean)：默认：true,设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；
options.read(Boolean)：默认：true 设置false，将不执行读取文件操作，返回null；
options.base(String)：设置输出路径以某个路径的某个组成部分为基础向后拼接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.2 gulp.dest&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;dest方法是指定处理完后文件输出的路径
path(必填)：类型为String or Function 指定文件输出路径，
或者定义函数返回文件输出路径亦可；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.3 gulp.task(name[, deps], fn)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;task定义一个gulp任务。
name(必填)：类型为String， 指定任务的名称；
deps(可选)：类型为StringArray，该任务依赖的任务；
fn(必填)：类型为Function，该任务调用的插件操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1.4 gulp.watch(glob [, opts], tasks)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;watch用于监听文件变化，文件一修改就会执行指定的任务。
glob(必填):需要处理的源文件匹配符路径,类型为String或StringArray；
opts(可选):类型为Object，
tasks(必填)：类型为StringArray，需要执行的任务的名称数组。
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cssmin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clean = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-clean&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rename = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rev = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rev&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        collector = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rev-collector&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uglify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//清除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            read: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;).pipe(clean());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//css压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;testCssmin&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;css/bootstrap.css&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;css/main.css&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;css/form.css&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;css/form.css&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;css/it-industry.css&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(cssmin())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(rename(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;path&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                path.basename += &lt;span class=&quot;string&quot;&gt;&#39;.min&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                path.extname =&lt;span class=&quot;string&quot;&gt;&#39;.css&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(rev())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(rev.manifest())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//js压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;testJsmin&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//递归遍历js文件夹下所有文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;js/**/*.js&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(uglify())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// .pipe(rev())&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// .pipe(gulp.dest(&#39;dist/js&#39;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// .pipe(rev.manifest())&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//替换路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;rev&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//- 读取 .json 文件以及需要进行css名替换的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;dist/css/rev-manifest.json&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;../WEB-INF/jsp/common/header.jsp&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//- 执行文件内css名的替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(collector(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                replaceReved: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;comment&quot;&gt;//- 替换后的文件输出的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;../WEB-INF/jsp/common/&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//监听&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 testJsmin 任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;testJsmin&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 testCssmin 任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;css/*.css&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;testCssmin&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在命令行直接输入 gulp 回车，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;testCssmin&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;testJsmin&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rev&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Gulp VS Grunt&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;优点
1.1 Gulp比Gruntgulp.task更快，利用Node.js强大的流，通过管道连接，速度更快
1.2 Gulp遵循代码优于配置策略，维护Gulp更容易，无需写繁杂的配置
1.3 Gulp的每个插件只完成一个功能
1.4 Gulp的核心API只有5个，学习成本低
缺点
1.1 社区不如Grunt完善，插件不够丰富&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;什么是Gulp&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Gulp是前端开发过程中对代码进行构建的工具,
自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件
    
    </summary>
    
      <category term="工具" scheme="http://wisdombud.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Gulp" scheme="http://wisdombud.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>提问的智慧</title>
    <link href="http://wisdombud.github.io/2016/03/21/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    <id>http://wisdombud.github.io/2016/03/21/提问的智慧/</id>
    <published>2016-03-21T12:33:48.424Z</published>
    <updated>2016-03-22T04:31:39.689Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;How To Ask Questions The Smart Way&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen&lt;/p&gt;
&lt;p&gt;本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。&lt;/p&gt;
&lt;p&gt;原文网址:&lt;a href=&quot;http://www.catb.org/~esr/faqs/smart-questions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.catb.org/~esr/faqs/smart-questions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu&lt;/p&gt;
&lt;p&gt;本中文指南是基于原文 3.10 版以及 2010 年由 &lt;a href=&quot;https://github.com/gasolin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gasolin&lt;/a&gt; 所翻译版本的最新翻译；&lt;/p&gt;
&lt;p&gt;协助指出翻译问题，&lt;strong&gt;请&lt;a href=&quot;https://github.com/ryanhanwu/smartquestions/issues/new&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发Issue&lt;/a&gt;，或直接&lt;a href=&quot;https://github.com/ryanhanwu/smartquestions/compare/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发Pull Request&lt;/a&gt;给我。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文另有简体中文版: &lt;a href=&quot;https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/ryanhanwu/smartquestions/blob/master/history.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文版本历史&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A3%B0%E6%98%8E&quot;&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%80%E4%BB%8B&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D&quot;&gt;在提问之前&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6&quot;&gt;当你提问时&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B&quot;&gt;慎选提问的论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stack-overflow&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BD%91%E7%AB%99%E5%92%8Circ%E8%AE%BA%E5%9D%9B&quot;&gt;网站和IRC论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8&quot;&gt;第二步，使用项目邮件列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98&quot;&gt;使用有意义且描述明确的标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D&quot;&gt;使问题容易回复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%94%A8%E6%B8%85%E6%99%B0%E6%AD%A3%E7%A1%AE%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5&quot;&gt;用清晰、正确、精准并合法语法的语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98&quot;&gt;使用易于读取且标准的文件格式发送问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B2%BE%E7%A1%AE%E7%9A%84%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9&quot;&gt;精确的描述问题并言之有物&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE&quot;&gt;话不在多而在精&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0bug&quot;&gt;别动辄声称找到Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%AF%E4%BB%A5%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%BD%86%E8%BF%98%E6%98%AF%E8%A6%81%E5%85%88%E5%81%9A%E5%8A%9F%E8%AF%BE&quot;&gt;可以低声下气，但还是要先做功课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E7%8C%9C%E6%B5%8B&quot;&gt;描述问题症状而非猜测&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6&quot;&gt;按发生时间先后列出问题症状&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B&quot;&gt;描述目标而不是过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D&quot;&gt;别要求使用私人电邮回复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82&quot;&gt;清楚明确的表达你的问题以及需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6&quot;&gt;询问有关代码的问题时&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5&quot;&gt;别把自己家庭作业的问题贴上来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5&quot;&gt;去掉无意义的提问句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5&quot;&gt;即使你很急也不要在标题写紧急&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9&quot;&gt;礼多人不怪，而且有时还很有帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E&quot;&gt;问题解决后，加个简短的补充说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88&quot;&gt;如何解读答案&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#RTFM%E5%92%8CSTFW%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86&quot;&gt;RTFM和STFW：如何知道你已完全搞砸了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82&quot;&gt;如果还是搞不懂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94&quot;&gt;处理无礼的回应&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85&quot;&gt;如何避免扮演失败者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98&quot;&gt;不该问的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98&quot;&gt;好问题与蠢问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94&quot;&gt;如果得不到回答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98&quot;&gt;如何更好地回答问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90&quot;&gt;相关资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%B8%A3%E8%B0%A2&quot;&gt;鸣谢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;声明&lt;/h2&gt;
&lt;p&gt;许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显着位置上注明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本指南不提供此项目的实际支持服务！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。&lt;/p&gt;
&lt;p&gt;如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而99%的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。&lt;/p&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.catb.org/~esr/faqs/hacker-howto.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑客&lt;/a&gt;的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。&lt;/p&gt;
&lt;p&gt;不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件**&lt;em&gt;好事&lt;/em&gt;**；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。&lt;/p&gt;
&lt;p&gt;首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，&amp;quot;好问题！&amp;quot;是诚挚的大力称赞。&lt;/p&gt;
&lt;p&gt;尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。&lt;/p&gt;
&lt;p&gt;我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为&lt;em&gt;失败者（撸瑟&lt;/em&gt;（由于历史原因，我们有时把它拼作 &lt;em&gt;lusers&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。&lt;/p&gt;
&lt;p&gt;我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答&lt;em&gt;赢家（winner&lt;/em&gt;的问题。&lt;/p&gt;
&lt;p&gt;如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 -- 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。&lt;/p&gt;
&lt;p&gt;所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 -- 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。&lt;/p&gt;
&lt;p&gt;如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 -- 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。&lt;/p&gt;
&lt;p&gt;（欢迎对本指南提出改进意见。你可以 email 你的建议至 &lt;a href=&quot;esr@thyrsus.com&quot;&gt;esr@thyrsus.com&lt;/a&gt; 或 &lt;a href=&quot;respond-auto@linuxmafia.com&quot;&gt;respond-auto@linuxmafia.com&lt;/a&gt;。然而请注意，本文并非&lt;a href=&quot;http://www.ietf.org/rfc/rfc1855.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网络礼节&lt;/a&gt;的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。）&lt;/p&gt;
&lt;h2&gt;在提问之前&lt;/h2&gt;
&lt;p&gt;在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尝试在你准备提问的论坛的旧文章中搜索答案。&lt;/li&gt;
&lt;li&gt;尝试上网搜索以找到答案。&lt;/li&gt;
&lt;li&gt;尝试阅读手册以找到答案。&lt;/li&gt;
&lt;li&gt;尝试阅读常见问题文件（FAQ）以找到答案。&lt;/li&gt;
&lt;li&gt;尝试自己检查或试验以找到答案&lt;/li&gt;
&lt;li&gt;向你身边的强者朋友打听以找到答案。&lt;/li&gt;
&lt;li&gt;如果你是程序开发者，请尝试阅读源代码以找到答案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所**&lt;em&gt;学到&lt;/em&gt;**的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。&lt;/p&gt;
&lt;p&gt;运用某些策略，比如先用Google搜索你所遇到的各种错误信息（既搜索&lt;a href=&quot;http://groups.google.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google论坛&lt;/a&gt;，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;289&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;别着急，不要指望几秒钟的Google搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着```蠢问题…```， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;绝不要自以为**_够格_**得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去**_挣到_**一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 --一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。```谁能给点提示？```、```我的这个例子里缺了什么？```以及```我应该检查什么地方```比```请把我需要的确切的过程贴出来```更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 当你提问时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 慎选提问的论坛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 在与主题不合的论坛上贴出你的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 在太多的不同新闻群组上重复转贴同样的问题（cross-post）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 向既非熟人也没有义务解决你问题的人发送私人电邮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因此，第一步是找到对的论坛。再说一次，Google和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括**_阅读_**FAQ）都没有结果，网站上也许还有报告Bug（Bug-reporting）的流程或链接，如果是这样，连过去看看。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 -- 如果你不确定，那就向别处发送，或者压根别发。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看FAQ或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;别像机关枪似的一次&amp;quot;扫射&amp;quot;所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于Unix或Windows操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 -- 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Stack Overflow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;搜索，**_然后_** 在 Stack Exchange 问。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stack Exchange 已经成长到[超过一百个网站](http://stackexchange.com/sites)，以下是最常用的几个站：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Stack Overflow 是问写程序有关的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Server Fault 是问服务器和网管相关的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 网站和IRC论坛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 &amp;quot;用**_我们的_**版本&amp;quot;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 第二步，使用项目邮件列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果一个项目既有&amp;quot;使用者&amp;quot; 也有&amp;quot;开发者&amp;quot;（或&amp;quot;黑客&amp;quot;）邮件列表或论坛，而你又不会动到那些源代码，那么就向&amp;quot;使用者&amp;quot;列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然而，如果你**_确信_**你的问题很特别，而且在&amp;quot;使用者&amp;quot; 列表或论坛中几天都没有回复，可以试试前往&amp;quot;开发者&amp;quot;列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 使用有意义且描述明确的标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在邮件列表、新闻群组或论坛中，大约50字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的```帮帮忙```、```跪求```、```急```（更别说```救命啊！！！！```这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式来提出问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个好标题范例是```目标 -- 差异```式的描述，许多技术支持组织就是这样做的。在```目标```部分指出是哪一个或哪一组东西有问题，在```差异```部分则描述与期望的行为不一致的地方。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 蠢问题：救命啊！我的笔电不能正常显示了！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 聪明问题：X.org 6.8.1的鼠标游标会变形，某牌显卡 MV1005 芯片组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 更聪明问题：X.org 6.8.1的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编写```目标 -- 差异``` 式描述的过程有助于你组织对问题的细緻思考。是什么被影响了？ 仅仅是鼠标游标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在6.8.1版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境**_和_**你遇到的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 ```Re: 测试``` 或者 ```Re: 新bug``` 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你**_只想_**在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 使问题容易回复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以```请将你的回复寄到……```来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，[换个好点的](http://linuxmafia.com/faq/Mail/muas.html)；如果是操作系统不支持这种邮件程序，也换个好点的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如```追踪此讨论串```、```有回复时发送邮件提醒```等功能。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 用清晰、正确、精准并语法正确的语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 -- 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它**_必须很_**准确，而且有迹象表明你是在思考和关注问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正确地拼写、使用标点和大小写，不要将```its```混淆为```it&amp;apos;s```，```loose```搞成```lose```或者将```discrete```弄成```discreet```。不要**全部用大写**，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。[Alan Cox](http://en.wikipedia.org/wiki/Alan_Cox)也许可以这样做，但你不行。）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更白话的说，如果你写得像是个半文盲[译注：[小白](http://zh.wikipedia.org/zh-tw/小白)]），那多半得不到理睬。也不要使用即时通讯中的简写或[火星文](http://zh.wikipedia.org/zh-tw/火星文)，如将```的```简化为```ㄉ```会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[译注：以下附上原文以供使用]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; English is not my native language; please excuse typing errors.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 英文不是我的母语，请原谅我的错字或语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; If you speak $LANGUAGE, please email/PM me;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; I may need assistance translating my question.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 如果你说**某语言**，请寄信/私讯给我；我需要有人协助我翻译我的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; I am familiar with the technical terms,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; but some slang expressions and idioms are difficult for me.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; I&amp;apos;ve posted my question in $LANGUAGE and English.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; I&amp;apos;ll be glad to translate responses, if you only use one or the other.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 我把我的问题用**某语言**和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 使用易于读取且标准的文件格式发送问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 使用纯文字而不是HTML ([关闭HTML](http://archive.birdhouse.org/etc/evilmail.html)并不难）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 使用MIME附件通常是可以的，前提是真正有内容（譬如附带的源代码或patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 不要发送一段文字只是单行句子但多次断行的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的终端机上阅读邮件，最好设置你的断行点小于80字。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 但是，也**_不要_**用任何固定断行资料（譬如日志档案拷贝或会话记录）。档案应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 在英语论坛中，不要使用```Quoted-Printable``` MIME编码发送消息。这种编码对于张贴非ASCII语言可能是必须的，但很多邮件程序并不支持这种编码。当它们分断时，那些文本中四处散布的```=20```符号既难看也分散注意力，甚至有可能破坏内容的语意。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 绝对，**_永远_**不要指望黑客们阅读使用封闭格式编写的文档，像是微软公司的Word或Excel文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你门口阶梯上时你的反应一样。即便他们能够处理，他们也很厌恶这么做。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 如果你从使用Windows的电脑发送电子邮件，关闭微软愚蠢的```智能引号```功能 （从[选项] &amp;gt; [校订] &amp;gt; [自动校正选项], 按掉```智能引号```单选框），以免在你的邮件中到处散布垃圾字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 在论坛，勿滥用```表情符号```和```HTML```功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对sex而不是有用的回复更有兴趣。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你使用图形用户界面的邮件程序（如微软公司的Outlook或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的```查看源代码```命令，用它来检查发送文件夹中的消息，以确保发送的是没有多餘杂质的纯文本文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 精确的描述问题并言之有物&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 仔细、清楚地描述你的问题或Bug的症状。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：```Fedora Core 4```、```Slackware 9.1```等）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 描述在提问前你是怎样去研究和理解这个问题的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 描述在提问前为确定问题而采取的诊断步骤。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 描述最近做过什么可能相关的硬件或软件变更。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 尽可能的提供一个可以```重现这个问题的既定环境```的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;尽量去揣测一个黑客会怎样反问你，在他提问的时候预先给他答案。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Simon Tatham](http://www.chiark.greenend.org.uk/~sgtatham/)写过一篇名为《[如何有效的报告Bug](http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html)》的出色文章。强力推荐你也读一读。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 话不在多而在精&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这样做的用处至少有三点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二，简化问题使你更有可能得到**_有用_**的答案；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三，在精炼你的bug报告的过程中，你很可能就自己找到了解决方法或权宜之计。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 别动辄声称找到Bug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当你在使用软件中遇到问题，除非你非常、**_非常_**的有根据，不要动辄声称找到了Bug。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的```Bug```，你应该能提供相应位置的修正或替代文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前[已经做了这些，是吧](#在提问之前)？）。这也意味着很有可能是你弄错了而不是软件本身有问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。这尤其严重当你在标题中嚷嚷着有```Bug```。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得像是**_你_**做错了什么。如果真的有Bug，你会在回复中看到这点。这样做的话，如果真有Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 可以低声下气，但还是要先做功课&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 -- 低声下气：```我知道我只是个可悲的新手，一个撸瑟，但...```。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 描述问题症状而非猜测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***蠢问题***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 我在编译内核时接连遇到 SIG11 错误，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***聪明问题***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2芯片组），&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 256MB Corsair PC133 SDRAM内存，在编译内核时，从开机20分钟以后就频频产生 SIG11 错误，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 但是在头20分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作20分钟。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 所有内存都换过了，没有效果。相关部分的标准编译记录如下…。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：```所有的诊断专家都来自密苏里州。``` 美国国务院的官方座右铭则是：```让我看看```（出自国会议员 Willard D. Vandiver 在1899年时的讲话：```我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。```） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 按发生时间先后列出问题症状&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如20行）记录会非常有帮助。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，```多```不等于```好```。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 描述目标而不是过程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**蠢问题**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的RGB值？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**聪明问题**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 我正试着用替换一幅图片的色码成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 但却无法从某绘图程序的颜色选择器取得十六进制的的RGB值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二种提问法比较聪明，你可能得到像是```建议采用另一个更合适的工具```的回复。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 别要求使用私人电邮回复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者也能因为能力和学识被其它同行看到而得到某种奖励。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当你要求私下回复时，这个过程和奖励都被中止。别这样做，让**_回复者_**来决定是否私下回答 -- 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是```向我发电邮，我将为论坛归纳这些回复```。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 -- 但你必须信守诺言。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 清楚明确的表达你的问题以及需求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;漫无边际的提问近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 -- 但这技巧通常和简化问题有所区别。因此，问```我想更好的理解X，可否指点一下哪有好一点说明？```通常比问```你能解释一下X吗？```更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 询问有关代码的问题时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;别要求他人帮你有问题的代码调试而不提示一下应该从何入手。张贴几百行的代码，然后说一声：```它不会动```会让你完全被忽略。只贴几十行代码，然后说一句：```在第七行以后，我期待它显示 &amp;lt;x&amp;gt;，但实际出现的是 &amp;lt;y&amp;gt;```比较有可能让你得到回应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最有效描述程序问题的方法是提供最精简的Bug展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例? 那是问题的缩影；一小个程序片段能**刚好**展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看[话不在多而在精](#话不在多而在精)一节）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 别把自己家庭作业的问题贴上来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由**_你_**来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的**使用者**邮件列表或论坛中提问。尽管黑客们**_会_**看出来，但一些有经验的使用者也许仍会给你一些提示。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 去掉无意义的提问句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;避免用无意义的话结束提问，例如```有人能帮我吗？```或者```这有答案吗？```。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;首先：如果你对问题的描述不是很好，这样问更是画蛇添足。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其次：由于这样问是画蛇添足，黑客们会很厌烦你 -- 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：```没错，有人能帮你```或者```不，没答案```。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一般来说，避免用 ```是或否```、```对或错```、```有或没有```类型的问句，除非你想得到[是或否类型的回答](http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 即使你很急也不要在标题写```紧急&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是你的问题，不是我们的。宣称&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;-- 你希望能看到你问题的人可能永远也看不到。&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如```紧急：帮我救救这个毛绒绒的小海豹！```肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 礼多人不怪，而且有时还很有帮助&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;彬彬有礼，多用```请```和```谢谢您的关注```，或```谢谢你的关照```。让大家都知道你对他们花时间免费提供帮助心存感激。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价问题的价值的）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得```先谢了```意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说```先谢了```，**_然后_**事后再对回复者表示感谢，或者换种方式表达感激，譬如用```谢谢你的关注```或```谢谢你的关照```。）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 问题解决后，加个简短的补充说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最理想的方式是向最初提问的话题回复此消息，并在标题中包含```已修正```，```已解决```或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串```问题 X```和```问题的X - 已解决```的潜在回复者就明白不用再浪费时间了（除非他个人觉得```问题 X```的有趣），因此可以利用此时间去解决其它问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;补充说明不必很长或是很深入；简单的一句```你好，原来是网线出了问题！谢谢大家 – Bill```比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此**_之后_**才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 如何解读答案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a id=&amp;quot;RTFM&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### RTFM和STFW：如何知道你已完全搞砸了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有一个古老而神圣的传统：如果你收到```RTFM （Read The Fucking Manual）```的回应，回答者认为你**应该去读他妈的手册**。当然，基本上他是对的，你应该去读一读。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RTFM 有一个年轻的亲戚。如果你收到```STFW（Search The Fucking Web）```的回应，回答者认为你**应该到他妈的网上搜索**过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **[Google是你的朋友](http://lmgtfy.com/)**！）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * **你需要的信息非常容易获得**；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * **你自己去搜索这些信息比灌给你能让你学到更多**。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你不应该因此不爽；**依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见**。你应该对他祖母般的慈祥表示感谢。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 如果还是搞不懂&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比方说，如果我回答你：```看来似乎是 zentry 卡住了；你应该先清除它。```，然后，这是一个**_很糟的_**后续问题回应：```zentry是什么？``` **_好_**的问法应该是这样：```哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;处理无礼的回应&lt;/h3&gt;
&lt;p&gt;很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。&lt;/p&gt;
&lt;p&gt;如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这**&lt;em&gt;没有&lt;/em&gt;&lt;strong&gt;发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而&lt;/strong&gt;&lt;em&gt;你&lt;/em&gt;**将被视为有错的一方，这将伤害到你获取信息或帮助的机会。&lt;/p&gt;
&lt;p&gt;另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。&lt;/p&gt;
&lt;p&gt;（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会&lt;strong&gt;正常&lt;/strong&gt;交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们**&lt;em&gt;喜欢&lt;/em&gt;**我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）&lt;/p&gt;
&lt;p&gt;在下一节，我们会谈到另一个问题，当**&lt;em&gt;你&lt;/em&gt;**行为不当时所会受到的&lt;code&gt;冒犯&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;如何避免扮演失败者&lt;/h2&gt;
&lt;p&gt;在黑客社区的论坛中有那么几次你可能会搞砸 -- 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。&lt;/p&gt;
&lt;p&gt;这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：&lt;/p&gt;
&lt;p&gt;熬过去，这很正常。事实上，它是有益健康且合理的。&lt;/p&gt;
&lt;p&gt;社区的标准不会自行维持，它们是通过参与者积极而**&lt;em&gt;公开地&lt;/em&gt;**执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。&lt;/p&gt;
&lt;p&gt;也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称&lt;code&gt;如果你不想帮助用户就闭嘴。&lt;/code&gt; 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的嘮叨与无用的技术论坛。&lt;/p&gt;
&lt;p&gt;夸张的讲法是：你要的是&lt;strong&gt;友善&lt;/strong&gt;（以上述方式）还是有用？两个里面挑一个。&lt;/p&gt;
&lt;p&gt;记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心&lt;strong&gt;你&lt;/strong&gt;和&lt;strong&gt;他的社区&lt;/strong&gt;而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现地有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。&lt;/p&gt;
&lt;p&gt;有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是**&lt;em&gt;真的&lt;/em&gt;**会把问题搞砸。&lt;/p&gt;
&lt;p&gt;这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。&lt;/p&gt;
&lt;p&gt;也别让自己卷入口水战，最好不要理睬大多数的口水战 -- 当然，是在你检验它们只是口水战，而并未指出你有搞砸的地方，且也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。&lt;/p&gt;
&lt;h2&gt;不该问的问题&lt;/h2&gt;
&lt;p&gt;以下是几个经典蠢问题，以及黑客没回答时心中所想的：&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q1&quot;&gt;我能在哪找到 X 程序或 X 资源？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q2&quot;&gt;我怎样用 X 做 Y？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q3&quot;&gt;如何设定我的 shell 提示？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q4&quot;&gt;我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q5&quot;&gt;我的程序/设定/SQL语句没有用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q6&quot;&gt;我的 Windows 电脑有问题，你能帮我吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q7&quot;&gt;我的程序不会动了，我认为系统工具 X 有问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q8&quot;&gt;我在安装 Linux（或者 X ）时有问题，你能帮我吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;a href=&quot;#q9&quot;&gt;我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我能在哪找到 X 程序或 X 资源？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：就在我找到它的地方啊，白痴 -- 搜索引擎的那一头。天哪！难道还有人不会用 &lt;a href=&quot;http://www.google.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google&lt;/a&gt; 吗？&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我怎样用 X 做 Y？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：如何设定我的 shell 提示？？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 &lt;a href=&quot;#RTFM&quot;&gt;RTFM&lt;/a&gt;，然后自己去找出来。&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q4&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q5&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我的程序/设定/SQL语句没有用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 -- 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你还有什么要补充的吗？&lt;/li&gt;
&lt;li&gt;真糟糕，希望你能搞定。&lt;/li&gt;
&lt;li&gt;这关我有什么屁事？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q6&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我的 Windows 电脑有问题，你能帮我吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：能啊，扔掉萎软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。&lt;/p&gt;
&lt;p&gt;注意：如果程序有官方版 Windows 或者与 Windows 有互动（如Samba），你**&lt;em&gt;可以&lt;/em&gt;**问与Windows相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q7&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我的程序不会动了，我认为系统工具 X 有问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q8&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在&lt;a href=&quot;http://www.linux.org/groups/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这儿&lt;/a&gt;找到使用者群组的清单）。&lt;/p&gt;
&lt;p&gt;注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 &lt;code&gt;Linux&lt;/code&gt; 和**&lt;em&gt;所有&lt;/em&gt;**被怀疑的硬件作关键词仔细搜索。&lt;/p&gt;
&lt;p&gt;&amp;lt;a id=&amp;quot;q9&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！&lt;/p&gt;
&lt;h2&gt;好问题与蠢问题&lt;/h2&gt;
&lt;p&gt;最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;蠢问题&lt;/em&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我可以在哪儿找到关于 Foonly Flurbamatic 的资料？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种问法无非想得到 &lt;a href=&quot;#RTFM&quot;&gt;STFW&lt;/a&gt; 这样的回答。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;聪明问题&lt;/em&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我用Google搜索过 &amp;quot;Foonly Flurbamatic 2600&amp;quot;，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题已经 STFW 过了，看起来他真的遇到了麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;蠢问题&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我从 foo 项目找来的源码没法编译。它怎么这么烂？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他觉得都是别人的错，这个傲慢自大的提问者&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;聪明问题&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提问者已经指明了环境，也读过了FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;蠢问题&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的主机板有问题了，谁来帮我？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;某黑客对这类问题的回答通常是：&lt;code&gt;好的，还要帮你拍拍背和换尿布吗？&lt;/code&gt;，然后按下删除键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;聪明问题&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。&lt;/p&gt;
&lt;p&gt;在最后一个问题中，注意&lt;code&gt;告诉我答案&lt;/code&gt;和&lt;code&gt;给我启示，指出我还应该做什么诊断工作&lt;/code&gt;之间微妙而又重要的区别。&lt;/p&gt;
&lt;p&gt;事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。&lt;/p&gt;
&lt;p&gt;通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。&lt;/p&gt;
&lt;p&gt;事后，当我向每个人表示感谢，并且讚赏这次良好的讨论经歷的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的**&lt;em&gt;名人&lt;/em&gt;**，而是因为我用了正确的方式来提问。&lt;/p&gt;
&lt;p&gt;黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我**&lt;em&gt;像&lt;/em&gt;**个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。&lt;/p&gt;
&lt;h2&gt;如果得不到回答&lt;/h2&gt;
&lt;p&gt;如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。&lt;/p&gt;
&lt;p&gt;总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。&lt;/p&gt;
&lt;p&gt;你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。&lt;/p&gt;
&lt;p&gt;有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。&lt;/p&gt;
&lt;p&gt;另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了-- 完全可能如此 --你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。&lt;/p&gt;
&lt;p&gt;对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。&lt;/p&gt;
&lt;h2&gt;如何更好地回答问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;态度和善一点&lt;/em&gt;&lt;/strong&gt;。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;对初犯者私下回复&lt;/em&gt;&lt;/strong&gt;。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果你不确定，一定要说出来&lt;/em&gt;&lt;/strong&gt;！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果帮不了忙，也别妨碍他&lt;/em&gt;&lt;/strong&gt;。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 --有些可怜的呆瓜会把它当成真的指令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;试探性的反问以引出更多的细节&lt;/em&gt;&lt;/strong&gt;。如果你做得好，提问者可以学到点东西 --你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。&lt;/p&gt;
&lt;p&gt;尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果你决定回答，就请给出好的答案&lt;/em&gt;&lt;/strong&gt;。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;正面的回答问题&lt;/em&gt;&lt;/strong&gt;！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 &lt;code&gt;试试看 A 或是 B&lt;/code&gt; 或者 &lt;code&gt;试试X 、 Y 、 Z 、 A 、 B 、 C&lt;/code&gt; 并附上一个链接一点用都没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;帮助你的社区从问题中学习&lt;/em&gt;&lt;/strong&gt;。当回复一个好问题时，问问自己&lt;code&gt;如何修改相关文件或常见问题文件以免再次解答同样的问题？&lt;/code&gt;，接着再向文件维护者发一份补丁。&lt;/p&gt;
&lt;p&gt;如果你是在研究一番后才做出的回答，&lt;strong&gt;&lt;em&gt;展现你的技巧而不是直接端出结果&lt;/em&gt;&lt;/strong&gt;。毕竟&lt;code&gt;授人以鱼不如授人以渔&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;相关资源&lt;/h2&gt;
&lt;p&gt;如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅&lt;a href=&quot;http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unix系统和网络基本原理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当你发布软件或补丁时，试着按&lt;a href=&quot;http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;软件发布实践&lt;/a&gt;操作。&lt;/p&gt;
&lt;h2&gt;鸣谢&lt;/h2&gt;
&lt;p&gt;Evelyn Mitchel贡献了一些愚蠢问题例子并启发了编写&lt;code&gt;如何更好地回答问题&lt;/code&gt;这一节， Mikhail Ramendik贡献了一些特别有价值的建议和改进。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;How To Ask Questions The Smart Way&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen&lt;/p&gt;
&lt;p&gt;本指南英文版版权为 Eric S.
    
    </summary>
    
      <category term="学习" scheme="http://wisdombud.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="提问" scheme="http://wisdombud.github.io/tags/%E6%8F%90%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>java通配符之“?”</title>
    <link href="http://wisdombud.github.io/2016/03/18/java%E9%80%9A%E9%85%8D%E7%AC%A6--%E9%97%AE%E5%8F%B7/"/>
    <id>http://wisdombud.github.io/2016/03/18/java通配符--问号/</id>
    <published>2016-03-18T02:33:14.702Z</published>
    <updated>2016-03-18T02:36:17.287Z</updated>
    
    <content type="html">&lt;h2&gt;简介泛型类和泛型方法&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Example&amp;lt;T&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public T getT()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setT(T t)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;E&amp;gt;  E getE(E e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;泛型类&lt;/h3&gt;
&lt;p&gt;上面的类Example就是一个泛型类，它在类名的后面加上&amp;lt; T &amp;gt;，不指定T的类型，却可以在类里面把T当做一个已知的类型来使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用1-在声明的时候规定类型
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example&amp;lt;String&amp;gt; ex = new Example&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时会把Example类里面所有的T替换为String。
常使用的例子，List集合的使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用2-继承该泛型类
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public Ex1 extends Example&amp;lt;Char&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时，类Ex1的所有方法(继承的)中的T都是Char型。
这样做的好处
就像一个模板一样，类里面的方法，可以供多个对象来使用。
常使用的例子，java在与数据库交互的时候封装的Dao层父类。&lt;/p&gt;
&lt;h3&gt;泛型方法&lt;/h3&gt;
&lt;p&gt;上面的getE方法就是泛型方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Boolean b = ex.getE(true);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时返回的类型就Boolen型。&lt;/p&gt;
&lt;h2&gt;通配符?&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object obj = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = str;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码，是正确的。子类的值可以给基类。&lt;/p&gt;
&lt;p&gt;但是泛型类型的子类型之间是互不相关的。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Object&amp;gt; objList = new ArrayList&amp;lt;Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; strList = new ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objList = strList;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码就会报错。因为strList并不是objList的一个子类。
但是如果是 List&amp;lt; ?&amp;gt; list = null;
list = objList;
list = strList;
这样写就可以。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?就是通配符。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void test2(List&amp;lt;?&amp;gt; coll)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的方法，我们就可以构造不同的泛型子类型当做参数。
List&amp;lt; String&amp;gt;、List&amp;lt; Char&amp;gt; 等都可以。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;List&amp;lt; ?&amp;gt;声明了List中包含的元素类型是未知的。通配符所代表的其实是一组类型，但具体的类型是未知的。List&amp;lt; ?&amp;gt;所声明的就是所有类型都是可以的。但是List&amp;lt; ?&amp;gt;并不等同于objList。objList实际上确定了List中包含的是Object
及其子类，在使用的时候都可以通过Object来进行引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;List&amp;lt; ?&amp;gt;则其中所包含的元素类型是不确定。其中可能包含的是String，也可能是 Integer。如果它包含了String的话，往里面添加Integer类型的元素就是错误的。正因为类型未知，就不能通过new ArrayList&amp;lt; ?&amp;gt;()的方法来创建一个新的ArrayList对象。因为编译器无法知道具体的类型是什么。但是对于 List&amp;lt; ?&amp;gt;中的元素确总是可以用Object来引用的，因为虽然类型未知，但肯定是Object及其子类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;向上造型一个泛型对象的引用&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;? extends XX&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;extends可以理解为小于等于，任意类型要是XX的子类或者是XX。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们有很多箱子，每个箱子里都装有不同的水果，我们需要找到一种方法能够通用的处理任何一箱水果。更通俗的说法，A是B的子类型，我们需要找到一种方法能够将C&amp;lt; A&amp;gt;类型的实例赋给一个C&amp;lt; B&amp;gt;类型的声明。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Apple&amp;gt; apples = new ArrayList&amp;lt;Apple&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;? extends Fruit&amp;gt; fruits = apples;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apple是Fruit的子类型，List&amp;lt; Apple&amp;gt; 是 List&amp;lt; ? extends Fruit&amp;gt; 的子类型。&lt;/p&gt;
&lt;h3&gt;向下造型一个泛型对象的引用&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;? super XX&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;super可以理解为大于等于，任意类型要是XX的父类或者是XX。
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Fruit&amp;gt; fruits = new ArrayList&amp;lt;Fruit&amp;gt;();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;? super Apple&amp;gt; = fruits;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Apple是Fruit的子类型，List&amp;lt; Fruit&amp;gt; 是 List&amp;lt; ? super Apple&amp;gt; 的父类型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.linuxidc.com/Linux/2012-10/72626.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java中泛型之类型通配符(?)&lt;/a&gt;
&lt;a href=&quot;http://blog.csdn.net/chunqiuwei/article/details/8008443&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java通配符&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;简介泛型类和泛型方法&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="java" scheme="http://wisdombud.github.io/categories/java/"/>
    
    
      <category term="通配符" scheme="http://wisdombud.github.io/tags/%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>java 各种O</title>
    <link href="http://wisdombud.github.io/2016/03/15/java%E7%9A%84%E5%90%84%E7%A7%8DO/"/>
    <id>http://wisdombud.github.io/2016/03/15/java的各种O/</id>
    <published>2016-03-15T08:38:35.000Z</published>
    <updated>2016-03-15T02:10:05.564Z</updated>
    
    <content type="html">&lt;h3&gt;1、各个术语的简介&lt;/h3&gt;
&lt;h5&gt;PO(persistant object)持久对象&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;最形象的理解就是一个PO就是数据库中的一条记录.PO是在ORM中出现的概念,就是ORM中的O,将数据库中的数据模型映射成为一个java对象.简单的PO就是对应数据库中某一张表的一个记录,多个记录就用PO的集合来表示.PO中不能包含任何对数据库的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;DAO(Data Access Objects)数据访问接口&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;顾名思义就是与数据库打交道,加载业务逻辑和数据库资源之间.DAO模式是J2EE的设计模式,实际上是两个模式的组合,即Data Accessor(数据访问者)模式和ACtive Domain Object(领域对象)模式.Data Accessor模式实现了数据访问和业务逻辑的分离;Active Domain Objecet模式时间了业务数据的对象化封装.(高大上的两种模式是啥子O^O)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;BO(Bussiness Object)业务对象&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;封装业务逻辑的java对象,我的理解就是我们的service实现.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;POJO(Plain Ordinary Java Object)简单的java对象&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;用来表示普通的Java对象,不是JavaBean,EntityBean或者SessionBean.POJO不担当任何的特殊角色,不继承,也不实现其他Java框架的类或者接口.通常只有property的属性和public的getter和setter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;DTO(Data Transfer Object)数据传输对象&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;这个概念也是来源于J2EE的设计模式,用于展示层和服务层之间数据传输对象.通过DTO,服务器只会将view层所需要的数据传输给view层,而不需要吧数据库中全部数据都传递给view层.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;VO&lt;/h5&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ViewObject视图对象
用于MVC的View层,把某个制定页面(或组件)的所有数据封装起来.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;value object值对象
用于业务层之间的数据传递.通常是抽象出来的业务对象,可以和表对应,也可以不,根据业务需求来定.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2、常见的一些术语的区别&lt;/h3&gt;
&lt;h5&gt;VO(ViewObject)与DTO&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在我们日常开发的过程中,很多情况下VO与DTO通常都是一样的,只是一个POJO(简单的java对象).从实现的角度上看,我们完全可以将DTO与VO合并到一起.但是从设计层面来说(好高大上)，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;网上举了一个关于男女的例子:
展示层与服务层交互的时候,通过DTO传给后台的只有为0和1,但是在展示的时候展示层会显示&amp;quot;男&amp;quot;&amp;quot;女&amp;quot;,我们可以考虑将VO和DTO两个概念合并到一起,不用DTO,直接用VO传递给服务层&amp;quot;男&amp;quot;&amp;quot;女&amp;quot;,这样也可以实现功能的.但是如果这时候客户要求可以定制风格,可以用&amp;quot;帅哥&amp;quot;&amp;quot;美女&amp;quot;来区分性别,这时候显然就不能用VO来完成全部工作了,需要在展示层用两个不同的VO来表示不同的展示形式,而与服务端交互的时候使用DTO来进行数据传输.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当然上面这个例子的前提是我们没有使用js这样的脚本语言,在web现阶段的开发中,因为js的普遍使用,我们完全可以将VO与DTO合到一起,有js来控制展现形式.但是概念还是要分清楚的,VO只是负责展示,DTO是用来数据传输的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;DTO与PO&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在很多只设置到单表操作的业务中,PO与DTO通常也是相同的(DTO和VO经常也是相同的,所以VO与PO也是相同的),当数据模型简单,字段较少的时候,服务层也可以直接将PO交给展示层展示.但是字段较多,而展示层又只需要展示很少的字段;或者展示层要展示的数据涉及到多张表,需要多个PO合并到一起的时候,我们需要DTO来进行数据传输.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;PO与POJO&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;PO持久对象是ORM框架中的概念,而POJO是java语言中的概念.PO作为一个持久对象,表示数据库中的一条记录,有insert语句创建,有delete语句删除,PO的生命周期与数据库是密切相关的;而POJO作为java中的一个对象,有new创建,由GC回收,显然要比PO朴素的多.另外PO往往只存在于一个数据库Connection之中,Connection关闭以后,持久化对象就不存在了,而POJO只要不被GC回收就会一直存在的.
想比与POJO,PO起码会多一些用来管理数据库entity状态的属性和方法.但是ORM追求的目标就是让PO在使用上尽量和POJO一直,所以我们在日常使用中PO就可以当成一个POJO使用,区分PO和POJO是hibernate的事情.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;VO与VO(-.-)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;以下纯属个人看法,有异议可以提出来共同探讨一下.
从MCV框架上看,ViewObject是在view层的数据,只用于view层的处理,与其它层完全没有联系(数据交流是DTO的事情).而ValueObject既然是业务处理之间的数据交互,那么它就是modol层的数据.所以完全不是一个东西嘛~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;3、相关链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kb.cnblogs.com/page/522348/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅析VO、DTO、DO、PO的概念、区别和用处&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/4059514.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DAO模式简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/bluepoint2009/p/POJO.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJO简单java对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wenku.baidu.com/view/9a86348fa0116c175f0e485b.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJO与PO的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4、相关知识&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;数据访问者模式?领域对象模式?javaSE 23中设计模式?&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3&gt;1、各个术语的简介&lt;/h3&gt;
&lt;h5&gt;PO(persistant object)持久对象&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;最形象的理解就是一个PO就是数据库中的一条记录.PO是在ORM中出现的概念,就是ORM中的O,将数据库中的数据模型映射成为一个java对象.
    
    </summary>
    
      <category term="java" scheme="http://wisdombud.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://wisdombud.github.io/tags/java/"/>
    
  </entry>
  
</feed>
