<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术博客</title>
  <subtitle>慧萌信安互联网</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wisdombud.github.io/"/>
  <updated>2016-03-15T02:10:05.564Z</updated>
  <id>http://wisdombud.github.io/</id>
  
  <author>
    <name>Joseph</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 各种O</title>
    <link href="http://wisdombud.github.io/2016/03/15/java%E7%9A%84%E5%90%84%E7%A7%8DO/"/>
    <id>http://wisdombud.github.io/2016/03/15/java的各种O/</id>
    <published>2016-03-15T08:38:35.000Z</published>
    <updated>2016-03-15T02:10:05.564Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、各个术语的简介&quot;&gt;&lt;a href=&quot;#1、各个术语的简介&quot; class=&quot;headerlink&quot; title=&quot;1、各个术语的简介&quot;&gt;&lt;/a&gt;1、各个术语的简介&lt;/h3&gt;&lt;h5 id=&quot;PO-persistant-object-持久对象&quot;&gt;&lt;a href=&quot;#PO-persistant-object-持久对象&quot; class=&quot;headerlink&quot; title=&quot;PO(persistant object)持久对象&quot;&gt;&lt;/a&gt;PO(persistant object)持久对象&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;最形象的理解就是一个PO就是数据库中的一条记录.PO是在ORM中出现的概念,就是ORM中的O,将数据库中的数据模型映射成为一个java对象.简单的PO就是对应数据库中某一张表的一个记录,多个记录就用PO的集合来表示.PO中不能包含任何对数据库的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;DAO-Data-Access-Objects-数据访问接口&quot;&gt;&lt;a href=&quot;#DAO-Data-Access-Objects-数据访问接口&quot; class=&quot;headerlink&quot; title=&quot;DAO(Data Access Objects)数据访问接口&quot;&gt;&lt;/a&gt;DAO(Data Access Objects)数据访问接口&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;顾名思义就是与数据库打交道,加载业务逻辑和数据库资源之间.DAO模式是J2EE的设计模式,实际上是两个模式的组合,即Data Accessor(数据访问者)模式和ACtive Domain Object(领域对象)模式.Data Accessor模式实现了数据访问和业务逻辑的分离;Active Domain Objecet模式时间了业务数据的对象化封装.(高大上的两种模式是啥子O^O)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;BO-Bussiness-Object-业务对象&quot;&gt;&lt;a href=&quot;#BO-Bussiness-Object-业务对象&quot; class=&quot;headerlink&quot; title=&quot;BO(Bussiness Object)业务对象&quot;&gt;&lt;/a&gt;BO(Bussiness Object)业务对象&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;封装业务逻辑的java对象,我的理解就是我们的service实现.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;POJO-Plain-Ordinary-Java-Object-简单的java对象&quot;&gt;&lt;a href=&quot;#POJO-Plain-Ordinary-Java-Object-简单的java对象&quot; class=&quot;headerlink&quot; title=&quot;POJO(Plain Ordinary Java Object)简单的java对象&quot;&gt;&lt;/a&gt;POJO(Plain Ordinary Java Object)简单的java对象&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;用来表示普通的Java对象,不是JavaBean,EntityBean或者SessionBean.POJO不担当任何的特殊角色,不继承,也不实现其他Java框架的类或者接口.通常只有property的属性和public的getter和setter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;DTO-Data-Transfer-Object-数据传输对象&quot;&gt;&lt;a href=&quot;#DTO-Data-Transfer-Object-数据传输对象&quot; class=&quot;headerlink&quot; title=&quot;DTO(Data Transfer Object)数据传输对象&quot;&gt;&lt;/a&gt;DTO(Data Transfer Object)数据传输对象&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;这个概念也是来源于J2EE的设计模式,用于展示层和服务层之间数据传输对象.通过DTO,服务器只会将view层所需要的数据传输给view层,而不需要吧数据库中全部数据都传递给view层.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;VO&quot;&gt;&lt;a href=&quot;#VO&quot; class=&quot;headerlink&quot; title=&quot;VO&quot;&gt;&lt;/a&gt;VO&lt;/h5&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ViewObject视图对象&lt;br&gt;  用于MVC的View层,把某个制定页面(或组件)的所有数据封装起来.&lt;/li&gt;
&lt;li&gt;value object值对象&lt;br&gt;  用于业务层之间的数据传递.通常是抽象出来的业务对象,可以和表对应,也可以不,根据业务需求来定.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2、常见的一些术语的区别&quot;&gt;&lt;a href=&quot;#2、常见的一些术语的区别&quot; class=&quot;headerlink&quot; title=&quot;2、常见的一些术语的区别&quot;&gt;&lt;/a&gt;2、常见的一些术语的区别&lt;/h3&gt;&lt;h5 id=&quot;VO-ViewObject-与DTO&quot;&gt;&lt;a href=&quot;#VO-ViewObject-与DTO&quot; class=&quot;headerlink&quot; title=&quot;VO(ViewObject)与DTO&quot;&gt;&lt;/a&gt;VO(ViewObject)与DTO&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;在我们日常开发的过程中,很多情况下VO与DTO通常都是一样的,只是一个POJO(简单的java对象).从实现的角度上看,我们完全可以将DTO与VO合并到一起.但是从设计层面来说(好高大上)，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。&lt;/p&gt;
&lt;p&gt;网上举了一个关于男女的例子:&lt;br&gt;    展示层与服务层交互的时候,通过DTO传给后台的只有为0和1,但是在展示的时候展示层会显示”男””女”,我们可以考虑将VO和DTO两个概念合并到一起,不用DTO,直接用VO传递给服务层”男””女”,这样也可以实现功能的.但是如果这时候客户要求可以定制风格,可以用”帅哥””美女”来区分性别,这时候显然就不能用VO来完成全部工作了,需要在展示层用两个不同的VO来表示不同的展示形式,而与服务端交互的时候使用DTO来进行数据传输.&lt;/p&gt;
&lt;p&gt;当然上面这个例子的前提是我们没有使用js这样的脚本语言,在web现阶段的开发中,因为js的普遍使用,我们完全可以将VO与DTO合到一起,有js来控制展现形式.但是概念还是要分清楚的,VO只是负责展示,DTO是用来数据传输的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;DTO与PO&quot;&gt;&lt;a href=&quot;#DTO与PO&quot; class=&quot;headerlink&quot; title=&quot;DTO与PO&quot;&gt;&lt;/a&gt;DTO与PO&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;   在很多只设置到单表操作的业务中,PO与DTO通常也是相同的(DTO和VO经常也是相同的,所以VO与PO也是相同的),当数据模型简单,字段较少的时候,服务层也可以直接将PO交给展示层展示.但是字段较多,而展示层又只需要展示很少的字段;或者展示层要展示的数据涉及到多张表,需要多个PO合并到一起的时候,我们需要DTO来进行数据传输.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;PO与POJO&quot;&gt;&lt;a href=&quot;#PO与POJO&quot; class=&quot;headerlink&quot; title=&quot;PO与POJO&quot;&gt;&lt;/a&gt;PO与POJO&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;PO持久对象是ORM框架中的概念,而POJO是java语言中的概念.PO作为一个持久对象,表示数据库中的一条记录,有insert语句创建,有delete语句删除,PO的生命周期与数据库是密切相关的;而POJO作为java中的一个对象,有new创建,由GC回收,显然要比PO朴素的多.另外PO往往只存在于一个数据库Connection之中,Connection关闭以后,持久化对象就不存在了,而POJO只要不被GC回收就会一直存在的.&lt;br&gt;    想比与POJO,PO起码会多一些用来管理数据库entity状态的属性和方法.但是ORM追求的目标就是让PO在使用上尽量和POJO一直,所以我们在日常使用中PO就可以当成一个POJO使用,区分PO和POJO是hibernate的事情.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;VO与VO&quot;&gt;&lt;a href=&quot;#VO与VO&quot; class=&quot;headerlink&quot; title=&quot;VO与VO(-.-)&quot;&gt;&lt;/a&gt;VO与VO(-.-)&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;以下纯属个人看法,有异议可以提出来共同探讨一下.&lt;br&gt;    从MCV框架上看,ViewObject是在view层的数据,只用于view层的处理,与其它层完全没有联系(数据交流是DTO的事情).而ValueObject既然是业务处理之间的数据交互,那么它就是modol层的数据.所以完全不是一个东西嘛~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3、相关链接&quot;&gt;&lt;a href=&quot;#3、相关链接&quot; class=&quot;headerlink&quot; title=&quot;3、相关链接&quot;&gt;&lt;/a&gt;3、相关链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kb.cnblogs.com/page/522348/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅析VO、DTO、DO、PO的概念、区别和用处&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/4059514.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DAO模式简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/bluepoint2009/p/POJO.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJO简单java对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wenku.baidu.com/view/9a86348fa0116c175f0e485b.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJO与PO的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4、相关知识&quot;&gt;&lt;a href=&quot;#4、相关知识&quot; class=&quot;headerlink&quot; title=&quot;4、相关知识&quot;&gt;&lt;/a&gt;4、相关知识&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据访问者模式?领域对象模式?javaSE 23中设计模式?&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、各个术语的简介&quot;&gt;&lt;a href=&quot;#1、各个术语的简介&quot; class=&quot;headerlink&quot; title=&quot;1、各个术语的简介&quot;&gt;&lt;/a&gt;1、各个术语的简介&lt;/h3&gt;&lt;h5 id=&quot;PO-persistant-object-持久对象&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="java" scheme="http://wisdombud.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://wisdombud.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>EOVA简介</title>
    <link href="http://wisdombud.github.io/2016/03/13/EOVA%E7%AE%80%E4%BB%8B/"/>
    <id>http://wisdombud.github.io/2016/03/13/EOVA简介/</id>
    <published>2016-03-13T08:38:35.000Z</published>
    <updated>2016-03-13T09:15:29.733Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;Eova 是一个 J2EE 快速开发平台。&lt;/li&gt;
&lt;li&gt;Eova 适用于对 UI 布局和性能没有严苛要求的企业级 WEB 后台管理系统。&lt;/li&gt;
&lt;li&gt;是对Jfinal，easyUI的再次封装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EVOA能做什么&quot;&gt;&lt;a href=&quot;#EVOA能做什么&quot; class=&quot;headerlink&quot; title=&quot;EVOA能做什么&quot;&gt;&lt;/a&gt;EVOA能做什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单表数据的显示，分页，无需代码实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义二级三级菜单，随意DIY。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已经实现的权限管理模块，可自定义用户组，及权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录已实现（目前没有注册功能），可添加用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;DIY查询。&lt;/li&gt;
&lt;li&gt;自定义业务（重写业务拦截器）。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; public String addBefore(AopContext ac) throws Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String c = ac.record.get(&amp;quot;kaipiaoAmount&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String id = ac.record.getStr(&amp;quot;contractId&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String sql = &amp;quot;UPDATE base_contract SET amount=amount-? WHERE id=?;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Db.use(xx.DS_MAIN).update(sql, c, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return super.addBefore(ac);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; java.util.List&amp;lt;Record&amp;gt; list = ac.records;//获取当前所有数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (Record o : list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Integer status = o.get(&amp;quot;status&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (status == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    o.set(&amp;quot;status&amp;quot;, &amp;quot;在线&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    o.set(&amp;quot;status&amp;quot;, &amp;quot;未连接&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;自定义按钮（需要html + BS）。&lt;/li&gt;
&lt;li&gt;简单配置实现文件上传。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EVOA的优势&quot;&gt;&lt;a href=&quot;#EVOA的优势&quot; class=&quot;headerlink&quot; title=&quot;EVOA的优势&quot;&gt;&lt;/a&gt;EVOA的优势&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少了代码编写量，简化了开发过程。&lt;/li&gt;
&lt;li&gt;易于上手&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;详细介绍-有道云笔记链接&quot;&gt;&lt;a href=&quot;#详细介绍-有道云笔记链接&quot; class=&quot;headerlink&quot; title=&quot;详细介绍:有道云笔记链接&quot;&gt;&lt;/a&gt;详细介绍:&lt;a href=&quot;http://note.youdao.com/share/?id=e74a3bc10cc195a5a4c79c7257fcce9b&amp;amp;type=note&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有道云笔记链接&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Eova 是一个 J2EE 快速开发平台。&lt;/li&gt;
&lt;li&gt;Eova 适用于对 UI 布局和性能没有严苛要求的企业级 WEB 后台管理系统。&lt;/li&gt;
&lt;li&gt;是对Jfinal，easyUI的再次封装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;EVOA能做什么&quot;&gt;
    
    </summary>
    
      <category term="EOVA" scheme="http://wisdombud.github.io/categories/EOVA/"/>
    
    
      <category term="EOVA" scheme="http://wisdombud.github.io/tags/EOVA/"/>
    
  </entry>
  
  <entry>
    <title>日志简介</title>
    <link href="http://wisdombud.github.io/2016/03/11/%E6%97%A5%E5%BF%97/"/>
    <id>http://wisdombud.github.io/2016/03/11/日志/</id>
    <published>2016-03-11T08:38:35.000Z</published>
    <updated>2016-03-14T12:52:58.166Z</updated>
    
    <content type="html">&lt;h2 id=&quot;为什么需要日志&quot;&gt;&lt;a href=&quot;#为什么需要日志&quot; class=&quot;headerlink&quot; title=&quot;为什么需要日志&quot;&gt;&lt;/a&gt;为什么需要日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为项目上线后不允许你调试，你只能通过Log来分析问题。项目出问题时，你要能拿出Log证明自己负责的部分没有问题，如果是自己的问题，要从Log里快速找出错误原因。如果没有从Log里找出错误原因，那一定是一件很悲催的事情，特别是在bug不容易重现的情况下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;哪些地方打日志&quot;&gt;&lt;a href=&quot;#哪些地方打日志&quot; class=&quot;headerlink&quot; title=&quot;哪些地方打日志&quot;&gt;&lt;/a&gt;哪些地方打日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   打log的目的是为了迅速排错或在有争议时拿出证据证明自己。基于这个目的，log不在多，只要抓住一切对自己有利的信息，就可以了。
　&lt;/p&gt;
&lt;h3 id=&quot;LOG的级别及对应日志&quot;&gt;&lt;a href=&quot;#LOG的级别及对应日志&quot; class=&quot;headerlink&quot; title=&quot;LOG的级别及对应日志　&quot;&gt;&lt;/a&gt;LOG的级别及对应日志　&lt;/h3&gt;&lt;p&gt;Log最常用的级别就是DEBUG，INFO，WARN，ERROR，其他的很少用。如何运用合适的Log级别也是非常重要的，在不该用ERROR的地方用了ERROR，可能会给你带来额外的麻烦。&lt;br&gt;　1.ERROR：&lt;br&gt;　　ERROR是错误的意思，但不代表出现异常的地方就该打ERROR。我认为ERROR是相对程序正确运行来说的，如果出现了ERROR那就代表出问题了，开发人员必须要查一下原因，或许是程序问题，或许是环境问题，或许是理论上不该出错的地方出错了。总之，如果你觉得某个地方出问题时需要解决，就打ERROR，如果不需要解决就不要打ERROR。&lt;br&gt;　　举例来说，如果有一个接口。调用者传过来的参数不在你的接受范围内，在这种情况下你不能打ERROR，因为传什么值是用户决定的，并不影响程序正确运行。想象一下，如果你的服务器上有监控程序的话，检测到ERROR或WARN就报警，参数错误你也打ERROR，那运维人员会疯掉的。&lt;br&gt;　　如果做一个对讲机，在解析语音数据包时出错了，那就要打ERROR了，因为这个是理论上不该出错的地方，要不就是你的解析代码有问题，要不就是开发人员在拼凑语音包时存在问题，这个时候需要你来找出问题的原因。所以应该打ERROR。&lt;br&gt;　　2.WARN：&lt;br&gt;　　WARN是指出现了不影响程序正确运行的问题，WARN也是问题但不影响程序正常运行，如果WARN出现的过于频繁或次数太多，那就代表你要检查一下程序或环境或依赖程序是否真的出问题了。&lt;br&gt;　　假如你访问一个接口，设置了一个超时，超时之后会抛异常，你在try块里不该打ERROR也不该打INFO来无视它，这时你应该打WARN，紧紧是警告一下，如果超时过多那就该检查一下了，是不是对方接口有问题了或者是网络环境出问题了。&lt;br&gt;　　3.INFO和DEBUG：&lt;br&gt;　　ERROR和WARN是指有问题，而INFO和DEBUG就是指一般的信息了。在程序出问题时，如果这条log可以帮助你分析问题或查看程序的运行情况，那就应该打个INFO。如果仅仅是为了在调试阶段查看程序是否运行正确那就要打DEBUG。前边讨论的接口参数错误问题，就应该打个INFO了，调用者说你的接口总是返回错误代码，你可以告诉他，是他的哪个参数传错了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;常见日志点&quot;&gt;&lt;a href=&quot;#常见日志点&quot; class=&quot;headerlink&quot; title=&quot;常见日志点&quot;&gt;&lt;/a&gt;常见日志点&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.函数开始结束处&lt;br&gt;　　在重要函数的开始结束出应该打上log ，这样在看log时会比较直观，什么时候开始什么时候结束就会一目了然，万一中间出异常导致程序退出了，也知道是在哪个函数突然中断的。也同样适用于一个重要逻辑块的开始结束。&lt;br&gt;2.返回结果&lt;br&gt;　　尽量在重要函数或web接口的每个返回分支打印返回结果。在出现不好分析的异常时，从细节下手，这时log会派上用场。如果跟合作方在数据方面出现争议也可以及时拿出证据。&lt;br&gt;3.添加Exception异常的捕获&lt;br&gt;　　如果你在代码中捕获了某种异常，那你要在try块后添加Exception的捕获，以防出现运行时异常中断程序。&lt;br&gt;4.务必打印堆栈信息&lt;br&gt;　　在异常捕获代码中务必要将堆栈信息打印出来，否则打了那么多的log可能会功亏一篑。&lt;br&gt;5.多线程的log&lt;br&gt;　　在多线程的程序中，log最好要标记thredId，否则可能不知道是哪个线程的作业，也无法有条理的来观察一个线程。&lt;br&gt;6.成功失败标志&lt;br&gt;　　如果某个函数是做一件比较关键的事情，那么这件事情成功还是失败了，要打印log，否则关键事件运行结果如何都拿不出证据的话，实在是不能让人信服。&lt;br&gt;7.前后log的关系&lt;br&gt;　　如果是web程序或接口，那log就不是按照你预定的顺序出现的，可能是好几个响应的log穿插在一起的。代码里如果有几条log前后存在一定的数据关系，那么要将这几条log的关联信息打出来，用来确定是针对同一个响应的。如果没有明确的标志，很难说后边的log跟前边的log是同一个响应或者是针对同一条数据。&lt;br&gt;8.关于耗时&lt;br&gt; 　　访问一个第三方接口、上传下载文件等可能耗时的操作，都要记录完成这个操作所耗的时间。否则程序性能出了问题，你不知道是网络原因呢，还是你调用的第三方接口性能出现问题呢，还是你自己程序的问题呢。&lt;br&gt;9.关于数量&lt;br&gt; 　　涉及到数量的操作要打印log，比如查询数据库和批量拷贝文件、上传下载、批量格式转换等批量操作，设计到的数量要打印出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;误区&quot;&gt;&lt;a href=&quot;#误区&quot; class=&quot;headerlink&quot; title=&quot;误区&quot;&gt;&lt;/a&gt;误区&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;有异常一定打日志么？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;需要什么样的日志&quot;&gt;&lt;a href=&quot;#需要什么样的日志&quot; class=&quot;headerlink&quot; title=&quot;需要什么样的日志&quot;&gt;&lt;/a&gt;需要什么样的日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;时间、类名及函数名，行号、线程号等等&lt;/p&gt;
&lt;h2 id=&quot;有哪些已经封装好的日志&quot;&gt;&lt;a href=&quot;#有哪些已经封装好的日志&quot; class=&quot;headerlink&quot; title=&quot;有哪些已经封装好的日志&quot;&gt;&lt;/a&gt;有哪些已经封装好的日志&lt;/h2&gt;&lt;h3 id=&quot;slf4j&quot;&gt;&lt;a href=&quot;#slf4j&quot; class=&quot;headerlink&quot; title=&quot;slf4j&quot;&gt;&lt;/a&gt;slf4j&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/f1194361820/p/5096014.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/f1194361820/p/5096014.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;log4j配置&quot;&gt;&lt;a href=&quot;#log4j配置&quot; class=&quot;headerlink&quot; title=&quot;log4j配置&quot;&gt;&lt;/a&gt;log4j配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://summerbell.iteye.com/blog/487736&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://summerbell.iteye.com/blog/487736&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;log4net配置&quot;&gt;&lt;a href=&quot;#log4net配置&quot; class=&quot;headerlink&quot; title=&quot;log4net配置&quot;&gt;&lt;/a&gt;log4net配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jys509/p/4569874.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/jys509/p/4569874.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wangsaiming/archive/2013/01/11/2856253.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wangsaiming/archive/2013/01/11/2856253.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何分析日志&quot;&gt;&lt;a href=&quot;#如何分析日志&quot; class=&quot;headerlink&quot; title=&quot;如何分析日志&quot;&gt;&lt;/a&gt;如何分析日志&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/TalkStudy/archive/2007/12/19/1005886.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/TalkStudy/archive/2007/12/19/1005886.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么需要日志&quot;&gt;&lt;a href=&quot;#为什么需要日志&quot; class=&quot;headerlink&quot; title=&quot;为什么需要日志&quot;&gt;&lt;/a&gt;为什么需要日志&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为项目上线后不允许你调试，你只能通过Log来分析问题。项目出问题时，你要
    
    </summary>
    
      <category term="log" scheme="http://wisdombud.github.io/categories/log/"/>
    
    
      <category term="log" scheme="http://wisdombud.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>java web 之 servlet</title>
    <link href="http://wisdombud.github.io/2016/03/04/java%20web%20%E4%B9%8Bservlet/"/>
    <id>http://wisdombud.github.io/2016/03/04/java web 之servlet/</id>
    <published>2016-03-04T08:38:35.000Z</published>
    <updated>2016-03-13T09:20:38.338Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。&lt;br&gt;Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。&lt;br&gt;最早支持Servlet标准的是JavaSoft的Java Web Server。此后，一些其它的基于Java的Web服务器开始支持标准的Servlet。&lt;/p&gt;
&lt;p&gt;Servlet = Service + Applet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/0/03/JSPLife.svg&quot; alt=&quot;servlet&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Java_Servlet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki–servlet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://baike.baidu.com/view/25169.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/servlet/servlet-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;菜鸟教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rocomp/p/4808924.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cnblogs&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器
    
    </summary>
    
      <category term="J2EE-web" scheme="http://wisdombud.github.io/categories/J2EE-web/"/>
    
    
      <category term="web" scheme="http://wisdombud.github.io/tags/web/"/>
    
      <category term="servlet" scheme="http://wisdombud.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>WEB开发需要解决的问题</title>
    <link href="http://wisdombud.github.io/2016/03/02/WEB%20%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://wisdombud.github.io/2016/03/02/WEB 开发需要解决的问题/</id>
    <published>2016-03-02T08:38:35.000Z</published>
    <updated>2016-03-13T09:16:02.844Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-系统架构&quot;&gt;&lt;a href=&quot;#1-系统架构&quot; class=&quot;headerlink&quot; title=&quot;1. 系统架构&quot;&gt;&lt;/a&gt;1. 系统架构&lt;/h2&gt;&lt;h3 id=&quot;1-1-B-S系统架构&quot;&gt;&lt;a href=&quot;#1-1-B-S系统架构&quot; class=&quot;headerlink&quot; title=&quot;1.1 B/S系统架构&quot;&gt;&lt;/a&gt;1.1 B/S系统架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://s11.sinaimg.cn/mw690/9707fac3hd144196981fa&amp;amp;690&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-2-C-S系统架构&quot;&gt;&lt;a href=&quot;#1-2-C-S系统架构&quot; class=&quot;headerlink&quot; title=&quot;1.2 C/S系统架构&quot;&gt;&lt;/a&gt;1.2 C/S系统架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i7.qhimg.com/t01b21f3bbfda590e1e.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-3-对比与区别&quot;&gt;&lt;a href=&quot;#1-3-对比与区别&quot; class=&quot;headerlink&quot; title=&quot;1.3 对比与区别&quot;&gt;&lt;/a&gt;1.3 对比与区别&lt;/h3&gt;&lt;p&gt;1.3.1 概述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C/S结构，即Client/Server(客户机/服务器)结构，是大家熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，可以充分利用两端硬件环境的优势。早期的软件系统多以此作为首选设计标准。。&lt;br&gt;B/S结构，即Browser/Server(浏览器/服务器)结构，是随着Internet技术的兴起，对C/S结构的一种变化或者改进的结构。在这种 结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现，形成所谓3-tier结构。B/S结构，主要是 利用了不断成熟的WWW浏览器技术，结合浏览器的多种Script语言(VBScript、JavaScript…)和ActiveX技术，用通用浏览器 就实现了原来需要复杂专用软件才能实现的强大功能，并节约了开发成本，是一种全新的软件系统构造技术。随着Windows 98/Windows 2000将浏览器技术植入操作系统内部，这种结构更成为当今应用软件的首选体系结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.3.2 详述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Client/Server一般是建立在局域网的基础上的.Browser/Server一般是建立在广域网的基础上的.&lt;br&gt;1．硬件环境不同:&lt;br&gt;C/S 一般建立在专用的网络上, 小范围里的网络环境, 局域网之间再通过专门服务器提供连接和数据交换服务.&lt;br&gt;B/S 建立在广域网之上的, 不必是专门的网络硬件环境,例与电话上网, 租用设备. 信息自己管理. 有比C/S更强的适应范围, 一般只要有操作系统和浏览器就行&lt;br&gt;2．对安全要求不同&lt;br&gt;C/S 一般面向相对固定的用户群, 对信息安全的控制能力很强. 一般高度机密的信息系统采用C/S 结构适宜. 可以通过B/S发布部分可公开信息.&lt;br&gt;B/S 建立在广域网之上, 对安全的控制能力相对弱, 面向是不可知的用户群.&lt;br&gt;3．对程序架构不同&lt;br&gt;C/S 程序可以更加注重流程, 可以对权限多层次校验, 对系统运行速度可以较少考虑.&lt;br&gt;B/S 对安全以及访问速度的多重的考虑, 建立在需要更加优化的基础之上. 比C/S有更高的要求 B/S结构的程序架构是发展的趋势, 从MS的.Net系列的asp.net, java的servlet，python的django等.&lt;br&gt;4．系统维护不同&lt;br&gt;C/S 程序由于整体性, 必须整体考察, 处理出现的问题以及系统升级. 升级难. 可能是再做一个全新的系统。对于用户来说C/S升级维护需要重新安装一个程序.&lt;br&gt;B/S 构件组成,方面构件个别的更换,实现系统的无缝升级.  对于用户来说最多是刷新下页面。&lt;br&gt;5．操作系统不同&lt;br&gt;C/S 程序可以处理用户面固定, 并且在相同区域, 安全要求高需求, 与操作系统相关. 应该都是相同的系统&lt;br&gt;B/S 建立在广域网上, 面向不同的用户群, 分散地域, 这是C/S无法作到的. 与操作系统平台关系最小.&lt;br&gt;6．对本地接口的调用不同&lt;br&gt;C/S 多是建立的Window平台上,需要对本地API接口操作较多.&lt;br&gt;B/S 建立在浏览器上,浏览器都会有沙箱，对本地API接口操作必须通过浏览器才可以完成.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通讯协议不同&lt;br&gt;C/S一般是自建通讯协议，大部分是基于TCP或者SOCKET之上重新定义业务通讯协议&lt;br&gt;B/S 通讯协议是HTTP协议，已经规定好通讯协议，不可改变&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-前端&quot;&gt;&lt;a href=&quot;#2-前端&quot; class=&quot;headerlink&quot; title=&quot;2. 前端&quot;&gt;&lt;/a&gt;2. 前端&lt;/h2&gt;&lt;p&gt;指的是浏览器端（B端）的技术，相当于C/S中的C，只是C是固定的（浏览器）&lt;/p&gt;
&lt;p&gt;浏览器固定了哪些东西：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;UI的技术：HTML+CSS+JS&lt;/li&gt;
&lt;li&gt;通讯的协议：HTTP&lt;/li&gt;
&lt;li&gt;对本地API的操作：上传文件等&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;B端存在几种常见的浏览器：Chrome，IE，FireFox等。不同的浏览器基于标准实现的具体细节不一样。因此需要考虑浏览器兼容性问题。&lt;/p&gt;
&lt;h2 id=&quot;3-后端&quot;&gt;&lt;a href=&quot;#3-后端&quot; class=&quot;headerlink&quot; title=&quot;3. 后端&quot;&gt;&lt;/a&gt;3. 后端&lt;/h2&gt;&lt;p&gt;需要解决的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析HTTP协议—-一般由WEB服务器完成，tomcat等各种（也可以自己写socket，接收http请求，自己封装）&lt;/li&gt;
&lt;li&gt;业务处理&lt;br&gt; 数据的验证&lt;br&gt; 数据保存&lt;/li&gt;
&lt;li&gt;页面响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本流程是这些，所以抽象出来一些所谓的框架及技术。&lt;br&gt;java：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Servlet技术（将HTTP的解析、页面响应与业务处理区分开），分为WEB服务器（Tomcat等）和应用程序（各种war包）
&amp;gt; 页面响应技术： JSP、servlet、freemarker等等
&amp;gt; 业务处理：各种MVC的后端框架（spring mvc、Struts等）
&amp;gt; 数据处理：hibernate、spring jdbc等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;python：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Python Web服务器网关接口（或者缩写为WSGI，读作“wizgy”），将WEB服务器和应用程序分开
&amp;gt; django 业务处理各种等
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-参考&quot;&gt;&lt;a href=&quot;#4-参考&quot; class=&quot;headerlink&quot; title=&quot;4. 参考&quot;&gt;&lt;/a&gt;4. 参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://python.jobbole.com/81523/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.jobbole.com/81523/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=JE-Xpf-h0uBKCl3wPK9GQQ0U3tqtcql2ra_d1368tdQQ6FOGpiCunES9MYmH6gTfn5IJPJfBlkvP5C82QYHqOSFmW3BUhegxCCq0ixk7VJz-M9CT0YznLBnzCWc-5jCD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/link?url=JE-Xpf-h0uBKCl3wPK9GQQ0U3tqtcql2ra_d1368tdQQ6FOGpiCunES9MYmH6gTfn5IJPJfBlkvP5C82QYHqOSFmW3BUhegxCCq0ixk7VJz-M9CT0YznLBnzCWc-5jCD&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://zhidao.baidu.com/link?url=YK05yEAorh3NkdMX2oA1y6pTwZjCl7qMzCdXPgNCRwbbHYb-V6J7nnF0c_PRpolZbfB-T3cLwrKbO-Aph5f4YXdkFkvm-4SL5AXTdGN-DIy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhidao.baidu.com/link?url=YK05yEAorh3NkdMX2oA1y6pTwZjCl7qMzCdXPgNCRwbbHYb-V6J7nnF0c_PRpolZbfB-T3cLwrKbO-Aph5f4YXdkFkvm-4SL5AXTdGN-DIy&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-系统架构&quot;&gt;&lt;a href=&quot;#1-系统架构&quot; class=&quot;headerlink&quot; title=&quot;1. 系统架构&quot;&gt;&lt;/a&gt;1. 系统架构&lt;/h2&gt;&lt;h3 id=&quot;1-1-B-S系统架构&quot;&gt;&lt;a href=&quot;#1-1-B-S系统架构&quot; class=&quot;head
    
    </summary>
    
      <category term="J2EE-web" scheme="http://wisdombud.github.io/categories/J2EE-web/"/>
    
    
      <category term="web" scheme="http://wisdombud.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>WEB基础</title>
    <link href="http://wisdombud.github.io/2016/03/01/WEB%20%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
    <id>http://wisdombud.github.io/2016/03/01/WEB 基础内容/</id>
    <published>2016-03-01T08:38:35.000Z</published>
    <updated>2016-03-13T09:15:59.876Z</updated>
    
    <content type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;##什么是WEB&lt;br&gt;Web（万维网World Wide Web的简称）是个包罗万象的万花筒，不同的人从不同的角度观察，对于Web究竟是什么会得出大不相同的观点。作为Web开发者，我们需要从技术上来理解Web。从技术架构层面上看，Web的技术架构包括了四个基石：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URI：统一资源标识（URL:统一资源定位 URI+LOCATION）&lt;br&gt;HTTP: 超文本传输协议&lt;br&gt;HyperText（除了HTML外，也可以是带有超链接的XML或JSON）&lt;br&gt;MIME(多用途互联网邮件扩展)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;发展历程&quot;&gt;&lt;a href=&quot;#发展历程&quot; class=&quot;headerlink&quot; title=&quot;发展历程&quot;&gt;&lt;/a&gt;发展历程&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;静态内容阶段：在这个最初的阶段，使用Web的主要是一些研究机构。Web由大量的静态HTML文档组成，其中大多是一些学术论文。Web服务器可以被看作是支持超文本的共享文件服务器。&lt;/li&gt;
&lt;li&gt;CGI程序阶段：在这个阶段，Web服务器增加了一些编程API。通过这些API编写的应用程序，可以向客户端提供一些动态变化的内容。Web服务器与应用程序之间的通信，通过CGI（Common Gateway Interface）协议完成，应用程序被称作CGI程序。&lt;/li&gt;
&lt;li&gt;脚本语言阶段：在这个阶段，服务器端出现了ASP、PHP、JSP、ColdFusion等支持session的脚本语言技术，浏览器端出现了Java Applet、JavaScript等技术。使用这些技术，可以提供更加丰富的动态内容。&lt;/li&gt;
&lt;li&gt;瘦客户端应用阶段：在这个阶段，在服务器端出现了独立于Web服务器的应用服务器。同时出现了Web MVC开发模式，各种Web MVC开发框架逐渐流行，并且占据了统治地位。基于这些框架开发的Web应用，通常都是瘦客户端应用，因为它们是在服务器端生成全部的动态内容。&lt;/li&gt;
&lt;li&gt;RIA应用阶段：在这个阶段，出现了多种RIA（Rich Internet Application）技术，大幅改善了Web应用的用户体验。应用最为广泛的RIA技术是DHTML+Ajax。Ajax技术支持在不刷新页面的情况下动态更新页面中的局部内容。同时诞生了大量的Web前端DHTML开发库，例如Prototype、Dojo、ExtJS、jQuery/jQuery UI等等，很多开发库都支持单页面应用（Single Page Application）的开发。其他的RIA技术还有Adobe公司的Flex、微软公司的Silverlight、Sun公司的JavaFX（现在为Oracle公司所有）等等。&lt;/li&gt;
&lt;li&gt;移动Web应用阶段：在这个阶段，出现了大量面向移动设备的Web应用开发技术。除了Android、iOS、Windows Phone等操作系统平台原生的开发技术之外，基于HTML5的开发技术也变得非常流行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上述Web开发技术的发展过程看，Web从最初其设计者所构思的主要支持静态文档的阶段，逐渐变得越来越动态化。Web应用的交互模式，变得越来越复杂：从静态文档发展到以内容为主的门户网站、电子商务网站、搜索引擎、社交网站，再到以娱乐为主的大型多人在线游戏、手机游戏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考文献：&quot;&gt;&lt;a href=&quot;#参考文献：&quot; class=&quot;headerlink&quot; title=&quot;参考文献：&quot;&gt;&lt;/a&gt;参考文献：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://coolshell.cn/articles/6043.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web开发中需要了解的东西&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/15213/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web开发：我希望得到的编程学习路线图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RubyLouvre/agate/issues/8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么做java的web开发我们会使用struts2，springMVC和spring这样的框架?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19834302&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;零基础的前端开发初学者应如何系统地学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webclks.com/archives/2806&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web的前世今生&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;##什么是WEB&lt;br&gt;Web（万维网World Wide Web的简称）是个包罗万象的万花筒，不同的人从不同的角度观察，对于Web究竟是什么会得出大不相同的观点。作为Web开发者，我们需要从技术上来理解Web。从技术架构层面上看，Web的技术架构
    
    </summary>
    
      <category term="J2EE-web" scheme="http://wisdombud.github.io/categories/J2EE-web/"/>
    
    
      <category term="web" scheme="http://wisdombud.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>javascript prototype</title>
    <link href="http://wisdombud.github.io/2016/02/15/javascript%20prototype/"/>
    <id>http://wisdombud.github.io/2016/02/15/javascript prototype/</id>
    <published>2016-02-15T08:38:35.000Z</published>
    <updated>2016-03-13T09:21:09.923Z</updated>
    
    <content type="html">&lt;h2 id=&quot;js创建对象&quot;&gt;&lt;a href=&quot;#js创建对象&quot; class=&quot;headerlink&quot; title=&quot;js创建对象&quot;&gt;&lt;/a&gt;js创建对象&lt;/h2&gt;&lt;h3 id=&quot;最简单的对象&quot;&gt;&lt;a href=&quot;#最简单的对象&quot; class=&quot;headerlink&quot; title=&quot;最简单的对象&quot;&gt;&lt;/a&gt;最简单的对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj=&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj2=new Object();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;稍微复杂点的对象&quot;&gt;&lt;a href=&quot;#稍微复杂点的对象&quot; class=&quot;headerlink&quot; title=&quot;稍微复杂点的对象&quot;&gt;&lt;/a&gt;稍微复杂点的对象&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;写法一 : 定义完成后再添加属性和方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj=&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.a=2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.fn=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;写法二 ： 字面量赋值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a:2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn:function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题：对象如果要复用的时候怎么办？有没有类？&lt;/p&gt;
&lt;p&gt;javascript 没有类，没有类，没有类！只有对象！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;function-模拟一个类&quot;&gt;&lt;a href=&quot;#function-模拟一个类&quot; class=&quot;headerlink&quot; title=&quot;function 模拟一个类&quot;&gt;&lt;/a&gt;function 模拟一个类&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function createObj(a,fn)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var obj=&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                obj.a=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                obj.fn=fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var obj=createObj(2,function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alert(this.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;足够了么？还有没有问题？&lt;/p&gt;
&lt;p&gt;上面的这个function的返回的对象是什么？怎么判断创建出来的对象的类型？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;function-的特殊性&quot;&gt;&lt;a href=&quot;#function-的特殊性&quot; class=&quot;headerlink&quot; title=&quot;function 的特殊性&quot;&gt;&lt;/a&gt;function 的特殊性&lt;/h3&gt;&lt;p&gt;１. function可以接受参数，可以根据参数来创建相同类型不同值的对象&lt;/p&gt;
&lt;p&gt;２. &lt;strong&gt;function作为构造函数（通过new操作符调用）的时候会返回一个对象，构造函数的返回值分为两种情况，当function没有return语句或者return回一个基本类型（bool,int,string,undefined,null）的时候，返回新创建的一个匿名对象，该对象即为函数实例；如果function体内return一个引用类型对象（Array,Function,Object等）时，该对象会覆盖new创建的匿名对象作为返回值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;３. 那么使用function怎么解决类型识别问题呢，每个function实例对象都会有一个constructor属性（也不是“有”，而是可以对应），这个属性就可以指示其构造是谁，也可以使用instanceof 操作符来做判断对象是否为XXX的实例。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                this.name=name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                this.fn=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var person1=new Person(&amp;apos;Byron&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(person1.constructor==Person);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(person1 instanceof Person);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;再好一点的写法&quot;&gt;&lt;a href=&quot;#再好一点的写法&quot; class=&quot;headerlink&quot; title=&quot;再好一点的写法&quot;&gt;&lt;/a&gt;再好一点的写法&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                this.name=name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                this.fn=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var person1=new Person(&amp;apos;Byron&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var person2=new Person(&amp;apos;Frank&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(person1.fn==person2.fn);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：fn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;终极写法&quot;&gt;&lt;a href=&quot;#终极写法&quot; class=&quot;headerlink&quot; title=&quot;终极写法&quot;&gt;&lt;/a&gt;终极写法&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                this.name=name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Person.prototype.share=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Person.prototype.printName=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var person1=new Person(&amp;apos;Byron&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var person2=new Person(&amp;apos;Frank&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(person1.printName==person2.printName);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;属性访问&quot;&gt;&lt;a href=&quot;#属性访问&quot; class=&quot;headerlink&quot; title=&quot;属性访问&quot;&gt;&lt;/a&gt;属性访问&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var myObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a:2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myObj.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myObj.b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var myObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a:undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myObj.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myObj.b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var myObj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get a() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return this.h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set a(val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.h=val*2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object.defineProperty(myObj, &amp;quot;b&amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //enumerable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myObj.a=2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myObj.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(myObj.b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myObj.hasOwnProperty(&amp;quot;a&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;hasOwnProperty 只会检查属性是否在对象中&lt;br&gt;in 在prototype说~&lt;/p&gt;
&lt;h2 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;prototype&lt;/h2&gt;&lt;h3 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;javascript 中的对象有一个特殊的属性：prototype，表示对于其他对象的引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var oneObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a:2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var twoObj=Object.create(oneObj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(twoObj.a);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;尽头&quot;&gt;&lt;a href=&quot;#尽头&quot; class=&quot;headerlink&quot; title=&quot;尽头&quot;&gt;&lt;/a&gt;尽头&lt;/h3&gt;&lt;p&gt;Object.prototype&lt;/p&gt;
&lt;h3 id=&quot;属性的设置与屏蔽&quot;&gt;&lt;a href=&quot;#属性的设置与屏蔽&quot; class=&quot;headerlink&quot; title=&quot;属性的设置与屏蔽&quot;&gt;&lt;/a&gt;属性的设置与屏蔽&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var oneObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a:2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oneObj.b=&amp;apos;b&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链上存在普通访问的属性，并没有只读，那么会在当前对象添加b&lt;/li&gt;
&lt;li&gt;链上存在该属性，但被标记为只读，严格模式下会报错，普通模式没有执行&lt;/li&gt;
&lt;li&gt;链上有属性，并且有setter，会被执行，不会屏蔽&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js创建对象&quot;&gt;&lt;a href=&quot;#js创建对象&quot; class=&quot;headerlink&quot; title=&quot;js创建对象&quot;&gt;&lt;/a&gt;js创建对象&lt;/h2&gt;&lt;h3 id=&quot;最简单的对象&quot;&gt;&lt;a href=&quot;#最简单的对象&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="javacript" scheme="http://wisdombud.github.io/categories/javacript/"/>
    
    
      <category term="javacript" scheme="http://wisdombud.github.io/tags/javacript/"/>
    
      <category term="prototype" scheme="http://wisdombud.github.io/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>javacript new</title>
    <link href="http://wisdombud.github.io/2016/02/14/javascript%20new/"/>
    <id>http://wisdombud.github.io/2016/02/14/javascript new/</id>
    <published>2016-02-14T08:38:35.000Z</published>
    <updated>2016-03-13T09:21:03.501Z</updated>
    
    <content type="html">&lt;p&gt;1.如果一个函数没有返回值，那么如果不使用new来创建变量，那么该变量的值为undefined.如果用了new，那么就是Object.说明一个函数的默认的Prototype是Object.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Test1(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.a = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myTest = new Test1(&amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(myTest);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Test1WithoutNew(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.a = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myTestWithoutNew = Test1WithoutNew(&amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(myTestWithoutNew);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.如果函数有返回值，但是返回值是基本类型。那么new出来的myTest还是object.。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Test1(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.a = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myTest = new Test1(&amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(myTest); //Object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Test1WithoutNew(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.a = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myTestWithoutNew = Test1WithoutNew(&amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(myTestWithoutNew);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3。如果函数的返回值为new出来的对象，那么myTest的值根据new出来的对象而定。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Test1(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.a = str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return new String(this.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myTest = new Test1(&amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(myTest);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;1.如果一个函数没有返回值，那么如果不使用new来创建变量，那么该变量的值为undefined.如果用了new，那么就是Object.说明一个函数的默认的Prototype是Object.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
    
    </summary>
    
      <category term="javacript" scheme="http://wisdombud.github.io/categories/javacript/"/>
    
    
      <category term="javacript" scheme="http://wisdombud.github.io/tags/javacript/"/>
    
      <category term="new" scheme="http://wisdombud.github.io/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>javascript 作用域与闭包</title>
    <link href="http://wisdombud.github.io/2016/02/13/javascript%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://wisdombud.github.io/2016/02/13/javascript 作用域和闭包/</id>
    <published>2016-02-13T08:38:35.000Z</published>
    <updated>2016-03-13T09:20:57.573Z</updated>
    
    <content type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;第一章-作用域是什么&quot;&gt;&lt;a href=&quot;#第一章-作用域是什么&quot; class=&quot;headerlink&quot; title=&quot;第一章 作用域是什么&quot;&gt;&lt;/a&gt;第一章 作用域是什么&lt;/h2&gt;&lt;h3 id=&quot;js编译原理&quot;&gt;&lt;a href=&quot;#js编译原理&quot; class=&quot;headerlink&quot; title=&quot;js编译原理&quot;&gt;&lt;/a&gt;js编译原理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;到底是什么类型的语言？&lt;br&gt;动态、解释型语言？&lt;br&gt;no，它是&lt;strong&gt;编译型&lt;/strong&gt;的语言&lt;br&gt;why？&lt;blockquote&gt;
&lt;p&gt;不是提前编译的，编译在执行之前的几微妙甚至更短&lt;br&gt;编译结果不能移植&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;编译的过程&lt;blockquote&gt;
&lt;p&gt;词法分析-&amp;gt;语法分析-&amp;gt;代码生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;理解作用域&quot;&gt;&lt;a href=&quot;#理解作用域&quot; class=&quot;headerlink&quot; title=&quot;理解作用域&quot;&gt;&lt;/a&gt;理解作用域&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;js的执行参与者&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js引擎（v8、xx）：负责编译和执行的过程&lt;/li&gt;
&lt;li&gt;编译器：词法分析、语法分析、代码生成&lt;/li&gt;
&lt;li&gt;作用域：收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;code&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var a=2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;词法分析: var a = 2&lt;br&gt; 语法分析：var a； 作用域是否有a？有忽略，没有声明后放到作用域中&lt;br&gt; 生成代码：a=2；&lt;br&gt; 执行：js引擎会询问作用域有没有a，然后再赋值，如果没有就异常了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;code 2&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo(a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(a+b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;ReferenceError异常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LHS和RHS&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LHS:查找赋值操作的目标是谁？ a=&lt;br&gt;RHS：查找谁是赋值操作的源头 console.log(a) 或者 =a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;function的LHS和RHS&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo(a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(a+b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;LHS: foo(..  a.. b=..&lt;br&gt; RHS: foo.. console.. log… a b  a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;   不具有一般意义的一些代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var foo = function(a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(a+b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;LHS:foo.. foo(.. a.. b..&lt;br&gt;    RHS:function(.. console.. …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意：上面的LHS和RHS对于最后一个就不对了，编译器可以在代码生成时同时处理声明和值的定义。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数一数&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; function foo(a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var b=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var c= foo(2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;LHS:3&lt;br&gt;  RHS:4&lt;/p&gt;
&lt;h3 id=&quot;作用域嵌套&quot;&gt;&lt;a href=&quot;#作用域嵌套&quot; class=&quot;headerlink&quot; title=&quot;作用域嵌套&quot;&gt;&lt;/a&gt;作用域嵌套&lt;/h3&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;作用域的嵌套&lt;blockquote&gt;
&lt;p&gt;向上找一直到全局作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;LHS和RHS在嵌套时的不同&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LHS:如果到最后没有找到，那就创建一个(非严格模式)或者抛一个异常（ReferenceError，严格模式）；&lt;br&gt;RHS:如果到最后没有找到，那就抛一个异常（ReferenceError）&lt;br&gt;可以理解&lt;a href=&quot;#code2&quot;&gt;code2&lt;/a&gt;的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;javascript的编译过程包括：词法分析-&amp;gt;语法分析-&amp;gt;代码生成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用域&lt;/strong&gt;可以理解成一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量的查找&lt;/li&gt;
&lt;li&gt;变量查找方法：LHS和RHS&lt;/li&gt;
&lt;li&gt;作用域的嵌套&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第二章-词法作用域&quot;&gt;&lt;a href=&quot;#第二章-词法作用域&quot; class=&quot;headerlink&quot; title=&quot;第二章 词法作用域&quot;&gt;&lt;/a&gt;第二章 词法作用域&lt;/h2&gt;&lt;p&gt;作用域的工作模型：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;词法作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;动态作用域（Bash Perl）&lt;h3 id=&quot;词法作用域&quot;&gt;&lt;a href=&quot;#词法作用域&quot; class=&quot;headerlink&quot; title=&quot;词法作用域&quot;&gt;&lt;/a&gt;词法作用域&lt;/h3&gt;&lt;h4 id=&quot;定义与举例&quot;&gt;&lt;a href=&quot;#定义与举例&quot; class=&quot;headerlink&quot; title=&quot;定义与举例&quot;&gt;&lt;/a&gt;定义与举例&lt;/h4&gt;词法作用域是指定义在词法阶段的作用域。&lt;blockquote&gt;
&lt;p&gt;说人话：词法作用域就是你在写代码时定义在哪，就是哪个的作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    function foo(a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var b=a*2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        function bar(c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(a,b,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bar(b*3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo(2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;输出结果是什么？&lt;/li&gt;
&lt;li&gt;LHS和RHS分别有哪些？&lt;/li&gt;
&lt;li&gt;作用域有几个？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;遮蔽效应（全局如果被遮蔽，可以window.a访问）&lt;/li&gt;
&lt;li&gt;词法作用域只由函数声明时的所处的位置决定&lt;/li&gt;
&lt;li&gt;词法作用域查找只会查找一级标识符（对象的属性不会查找）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何欺骗词法作用域—一定不要使用，只是为了了解&quot;&gt;&lt;a href=&quot;#如何欺骗词法作用域—一定不要使用，只是为了了解&quot; class=&quot;headerlink&quot; title=&quot;如何欺骗词法作用域—一定不要使用，只是为了了解&quot;&gt;&lt;/a&gt;如何欺骗词法作用域—&lt;strong&gt;一定不要使用，只是为了了解&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;不管怎么说，都不要用&lt;/strong&gt;&lt;br&gt;&lt;em&gt;讲的目的只是为了看懂别人这么写的代码&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在执行时，动态的修改词法作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;####eval&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;功能：接收一个字符串作为参数，并将其中的内容看成在写代码时就加进去的一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo(str, a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eval(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&amp;quot;var b=3;&amp;quot;, 1);//1,3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际中可以执行一段代码后再传str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;严格模式： eval会有自己的作用域，不会修改插入的作用域了&lt;/p&gt;
&lt;p&gt;其它：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;setTimeOut(..) setInterval(..)，第一个参数可以接受字符串&lt;br&gt;new Function(..) 最后一个参数接受代码字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;不管怎么说，都不要用&lt;/strong&gt;&lt;br&gt;&lt;em&gt;讲的目的只是为了看懂别人这么写的代码&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;####with&lt;br&gt;&lt;strong&gt;with 会根据你传递给他的对象中凭空创造一个新的词法作用域&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;正常写法&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b: 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj.a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj.b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj.c);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单写法&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b: 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    with(obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ```  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 所带来的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ```javacript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function test(obj) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with(obj) {
    a = 2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var obj1 = {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var obj2 = {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; test(obj1);&lt;br&gt; console.log(obj1.a);&lt;br&gt; test(obj2);&lt;br&gt; console.log(obj2.a);&lt;br&gt; console.log(a);&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;gt;缺点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 欺骗词法作用域会导致不可预知的结果（对于不懂的人来说）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 严格模式不支持&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 性能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**不管怎么说，都不要用**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*讲的目的只是为了看懂别人这么写的代码*    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###小结&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; * 定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 欺骗词法作用域 **千万不要使用**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 补充知识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 动态作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; 不关心在何处声明，只关心在何处调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;gt;&amp;gt; ```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function test1() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; function bar() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 3;
test1();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var a = 2;&lt;br&gt; bar();&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 函数作用域和块作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 提升&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 闭包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 看代码说结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt; var a = 1;&lt;br&gt; function foo() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var b = 2;
function bar() {
    var b = &amp;apos;bar2&amp;apos;;
    console.log(b);
    function baz() {
        console.log(a);
    }
    baz();
}
bar();
console.log(b);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; foo();&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    bar2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; a = 2;&lt;br&gt; var a;&lt;br&gt; console.log( a );&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码3:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; console.log( a );&lt;br&gt; var a = 2;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    undefined  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码4:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; foo();&lt;br&gt; function foo() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;apos;foo&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; //foo();&lt;br&gt; bar();&lt;br&gt; var foo = function bar() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;apos;foo&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; };&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    foo is not function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar is not defined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码6:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; var foo;&lt;br&gt; function foo() { console.log( “a” ); }&lt;br&gt; function foo() { console.log( “b” ); }&lt;/p&gt;
&lt;p&gt; foo();&lt;br&gt; foo = true;&lt;br&gt; if (foo) {&lt;/p&gt;
&lt;p&gt; }&lt;br&gt; else {&lt;/p&gt;
&lt;p&gt; }&lt;br&gt; foo();&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo is not a function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码7:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; var i;&lt;br&gt; for (i=1; i&amp;lt;= 5; i++) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setTimeout( function timer(){
    console.log( i );
}, i*1000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码8:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var baz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function bar() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log( a );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz = foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function foo(j){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; function timer(){
     console.log(j);
 }
return timer();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;/p&gt;
&lt;p&gt; for (var i=1; i&amp;lt;=5; i++) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setTimeout(foo(i), i*1000 );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码9:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function foo() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 2;
function bar() {
    console.log( a );
}
return bar;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var baz = foo();&lt;br&gt; baz();&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码10:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function foo(a){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(a+b);
b=a;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; foo(2);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   b is not defined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码11:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function foo(a){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.b=a;
console.log(a+b);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; a=2;&lt;br&gt; foo(2);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码12:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  var foo = function(a){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    console.log(a+b);
    b=a;
}
foo(2);
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码13:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  function foo(a) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var b=a*2;
    function bar(c) {
        console.log(a,b,c);
    }
    bar(b*3);
}
foo(2);
console.log(a);
console.log(b);
console.log(c);
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    2,4,12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a is not defined;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码14:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function foo(str, a) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval(str);
console.log(a, b);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var b = 2;&lt;br&gt; foo(“var b=3;”, 1);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    1,3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码15:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function test(obj) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with(obj) {
    a = 2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var obj1 = {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var obj2 = {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; test(obj1);&lt;br&gt; console.log(obj1.a);&lt;br&gt; test(obj2);&lt;br&gt; console.log(obj2.a);&lt;br&gt; console.log(a);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码16:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;词法作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  function test1() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; function bar() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 3;
test1();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var a = 2;&lt;br&gt; bar();&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码17:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function Person(name){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.name=name;
this.fn=function(){
    alert(this.name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var person1=new Person(‘Byron’);&lt;br&gt; console.log(person1.constructor==Person);&lt;br&gt; console.log(person1 instanceof Person);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####代码18:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function Person(name){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.name=name;
this.fn=function(){
    alert(this.name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var person1=new Person(‘Byron’);&lt;br&gt; var person2=new Person(‘Frank’);&lt;br&gt; console.log(person1.fn==person2.fn);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码19:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function Person(name){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.name=name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; Person.prototype.share=[];&lt;br&gt; Person.prototype.printName=function(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alert(this.name);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var person1=new Person(‘Byron’);&lt;br&gt; var person2=new Person(‘Frank’);&lt;br&gt; console.log(person1.printName==person2.printName);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码20:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  var myObj = {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;get a() {
    return this.h;
},
set a(val){
    this.h=val*2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; Object.defineProperty(myObj, “b”, {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;get: function() {
    return 3;
    //enumerable: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; });&lt;br&gt; myObj.a=2;&lt;br&gt; console.log(myObj.a);&lt;br&gt; console.log(myObj.b);&lt;br&gt; myObj.hasOwnProperty(“a”);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码21:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; var oneObj={&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a:2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var twoObj=Object.create(oneObj);&lt;br&gt; console.log(twoObj.a);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码22:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function Test1(str) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.a = str;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var myTest = new Test1(“test1”);&lt;br&gt; console.log(myTest.a);&lt;br&gt; function Test1WithoutNew(str) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.a = str;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var myTestWithoutNew = Test1WithoutNew(“test1”);&lt;br&gt; console.log(myTestWithoutNew.a);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码23:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function Test1(str) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.a = str;
return this.a;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var myTest = new Test1(“test1”);&lt;br&gt; console.log(myTest);&lt;br&gt; function Test1WithoutNew(str) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.a = str;
return this.a;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var myTestWithoutNew = Test1WithoutNew(“test1”);&lt;br&gt; console.log(myTestWithoutNew);&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;####代码24:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```javascript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; function Test1(str) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.a = str;
return new String(this.a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var myTest = new Test1(“test1”);&lt;br&gt; console.log(myTest);&lt;br&gt;```&lt;br&gt; test1&lt;/p&gt;
&lt;h2 id=&quot;闭包的作用（如何实现模块化）&quot;&gt;&lt;a href=&quot;#闭包的作用（如何实现模块化）&quot; class=&quot;headerlink&quot; title=&quot;闭包的作用（如何实现模块化）&quot;&gt;&lt;/a&gt;闭包的作用（&lt;strong&gt;如何实现模块化&lt;/strong&gt;）&lt;/h2&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h2&gt;&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;h2 id=&quot;“类”与面向对象&quot;&gt;&lt;a href=&quot;#“类”与面向对象&quot; class=&quot;headerlink&quot; title=&quot;“类”与面向对象&quot;&gt;&lt;/a&gt;“类”与面向对象&lt;/h2&gt;&lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;h2 id=&quot;行为委托&quot;&gt;&lt;a href=&quot;#行为委托&quot; class=&quot;headerlink&quot; title=&quot;行为委托&quot;&gt;&lt;/a&gt;行为委托&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;第一章-作用域是什么&quot;&gt;&lt;a href=&quot;#第一章-作用域是什么&quot; class=&quot;headerlink&quot; title=&quot;第一章 作用域是什么&quot;&gt;&lt;/a&gt;第一章 作用域是什么&lt;/h2&gt;&lt;h3 id=&quot;js编译原理&quot;&gt;&lt;a href=&quot;#js
    
    </summary>
    
      <category term="javacript" scheme="http://wisdombud.github.io/categories/javacript/"/>
    
    
      <category term="javacript" scheme="http://wisdombud.github.io/tags/javacript/"/>
    
      <category term="scope" scheme="http://wisdombud.github.io/tags/scope/"/>
    
  </entry>
  
</feed>
